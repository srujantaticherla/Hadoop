CREATE OR REPLACE PROCEDURE PWW5.PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE (IN pLOG_Execution VARCHAR(1) DEFAULT NULL)
	DYNAMIC RESULT SETS 1
	SPECIFIC PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE
	LANGUAGE SQL
	MODIFIES SQL DATA
	
	--COMMIT ON RETURN NO
P1: BEGIN
	DECLARE vTBLRID VARCHAR(25);
	DECLARE vSRCTBLRID BIGINT;
	DECLARE vSrcSchmNm VARCHAR(75);
	DECLARE vSrcNm VARCHAR(75);
	DECLARE vSrcIDColNm VARCHAR(75);
	DECLARE vDestNm VARCHAR(75);
	--DECLARE vDestCOLNm VARCHAR(75);
	DECLARE vDestSchmNm VARCHAR(75);
	DECLARE vPartTblNm CLOB(15000);
	DECLARE rows_fetched BIGINT;
	DECLARE SQLCODE INTEGER DEFAULT 0;
    DECLARE SQLSTATE CHAR(5) DEFAULT '00000';
    DECLARE vRetCode INTEGER DEFAULT 0;
    DECLARE vRetCodeSRCCURSOR INTEGER DEFAULT 0;
    DECLARE vRetCodeTEMP INTEGER DEFAULT 0;
    DECLARE vRecCnt INTEGER DEFAULT 0;
    DECLARE vQry CLOB(150000);
    DECLARE at_end SMALLINT DEFAULT 0; 
	DECLARE vSrcID BIGINT;
	DECLARE result1 RESULT_SET_LOCATOR VARYING;
	DECLARE EOF SMALLINT DEFAULT 0 ;
	DECLARE vParent_Table_Flag VARCHAR(2) DEFAULT '';
	DECLARE vDest_WHERE_Clause CLOB(15451375) DEFAULT '';
	DECLARE vDest_WHERE_Clause_WITH_VALUE CLOB(15451375) DEFAULT '';
	DECLARE vINSERT_UPDATE_COND BIGINT DEFAULT 0;
	DECLARE vChild_Table_Select_Filter CLOB(15451375) DEFAULT NULL;
	DECLARE vCnt_Completed_Tables BIGINT DEFAULT 0;
	DECLARE vCnt_Remaining_Tables_DF BIGINT DEFAULT 0;
	DECLARE vCnt_Remaining_Tables_OT BIGINT DEFAULT 0;
	DECLARE vCnt_Remaining_Tables BIGINT DEFAULT 0;
	DECLARE p_sqlstate_out CHAR(5);
	DECLARE pRetVal BIGINT;
	DECLARE pRetRecCount BIGINT;  
	DECLARE vSrcColNm CLOB(1451375) DEFAULT '';
	DECLARE vDestColNm CLOB(1451375) DEFAULT '';
	DECLARE vSrcColNm_DomInst_COLNM CLOB(15451375) DEFAULT '';
	DECLARE vSrcColNm_DomInst_forSELECT CLOB(154513750) DEFAULT '';
	DECLARE vValidCnt_Parent_Records BIGINT DEFAULT 0;
	DECLARE vSrc_PK_Col_ForCheck VARCHAR(1000);
	DECLARE vSrc_PK_Col_ForCheck_val VARCHAR(1000);
	DECLARE vTAB_Data_Decision VARCHAR(1) DEFAULT 'N';
	DECLARE vTDD_SrcColumnNm CLOB(15451375) DEFAULT '';
	DECLARE vTDD_DestChkTabNm CLOB(15451375) DEFAULT '';
	DECLARE vTDD_DestColumnNm CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Src_CHAR_DATATYPE  CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Dest_CHAR_DATATYPE  CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Dest_DOMINST  CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Dest_DOMID  CLOB(15451375) DEFAULT '';
	DECLARE vTDD_DestIDColNm CLOB(15451375) DEFAULT '';
	DECLARE vTDD_FromJOINCond CLOB(15451375) DEFAULT '';
	DECLARE vND_SrcDest_ColmNm CLOB(15451375) DEFAULT '';
	DECLARE vOrginal_ND_SrcDest_ColmNm CLOB(15451375) DEFAULT '';
	DECLARE vND_FromJOINCond CLOB(15451375) DEFAULT '';
	DECLARE vND_ParentTablRef VARCHAR(3200) DEFAULT '';
	DECLARE vTDD_Where_Clause CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Where_Clause_1 CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Dest_Col_ID CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Dest_Col_ID_WITH_IN CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Dest_Col_ID_withVal CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Dest_Col_ID_WITH_IN_withVal CLOB(15451375) DEFAULT '';
	DECLARE vTDD_Where_Clause_withVal CLOB(15451375) DEFAULT '';
	DECLARE vND_Where_Clause CLOB(15451375) DEFAULT '';
	DECLARE vND_Where_Clause_1 CLOB(15451375) DEFAULT '';
	DECLARE vND_Dest_Col_ID CLOB(15451375) DEFAULT '';
	DECLARE vND_Dest_Col_ID_withVal CLOB(15451375) DEFAULT '';
	DECLARE vND_Where_Clause_withVal CLOB(15451375) DEFAULT '';
	
	DECLARE vOrg_TDD_Src_CHAR_DATATYPE CLOB(15451375) DEFAULT '';
	DECLARE vOrg_TDD_Dest_CHAR_DATATYPE CLOB(15451375) DEFAULT '';
	DECLARE vOrg_TDD_Dest_DOMINST CLOB(15451375) DEFAULT '';
	DECLARE vOrg_TDD_Dest_DOMID CLOB(15451375) DEFAULT '';
		
	DECLARE vTDD_Cnt INT;
	DECLARE vBatchSize BIGINT;
	DECLARE vRecordCount BIGINT DEFAULT 1;
	 -- DEFAULT 0 REMOVED AS A DEFINITE VALUE TO BE ASSIGNED TO THE VARIABLE
	-- IF THERE IS AN ERROR IN QUERY LIKE THIS SET ? = (SELECT COUNT(*) FROM PWW5.PLN_MEMBER WHERE CERT_NO = '5900475); (QUOTES NOT PRESENT IN THE LAST)
	-- THIS IS NOT FAILING THE QUERY, SO DEFAULT VALUE GOES TO VARIABLE AS ZERO and INSERT DECISION IS MADE
	DECLARE vErrMsg VARCHAR(3000);
	DECLARE vBatchNum INT DEFAULT 0;
	DECLARE SQLDIS INTEGER DEFAULT 0;
	DECLARE vQryID INTEGER DEFAULT 0;
	DECLARE vConfigTblCrsr_Open VARCHAR(1) DEFAULT 'N';
	DECLARE vINSERT_ERRORLOG VARCHAR(1) DEFAULT 'N';
	DECLARE vQryLineNum INTEGER DEFAULT 0;	
	DECLARE vSRC_WHERE_Clause_WITH_VALUE CLOB(15451375) DEFAULT '';	
	DECLARE vDecFlag VARCHAR(1) DEFAULT '';
	DECLARE vSvePointDeclared VARCHAR(1) DEFAULT 'N';
	DECLARE vI INT DEFAULT 0;
	DECLARE vSRC_ROW_EFF_DT DATE;
	DECLARE vSRC_ROW_EXP_DT DATE;
	DECLARE vPrev_ImportStatus VARCHAR(100);
	DECLARE vQry_LineNum_LOGGED VARCHAR(3200);
	DECLARE vNum_Rows BIGINT;
	DECLARE vUPDATE_READSTATUS VARCHAR(2);
	DECLARE vUPDATE_TABLE_READSTATUS VARCHAR(1) DEFAULT 'N';
	DECLARE vDest_PK_ColName varchar(150);
	DECLARE vSrc_Parent_Ref_Col_Nm CLOB(15451375);
	--DECLARE FIRST_RECORD_LOGGING VARCHAR(1) DEFAULT 'Y';
	DECLARE vCHILD_CONFIG_ROWID CLOB(15451375);
	DECLARE vCHILD_DEST_PK CLOB(15451375);
	DECLARE vSrc_Parent_Ref_Col_Val VARCHAR(32000);
	DECLARE vcreated_by VARCHAR(50);
	--DECLARE vDEST_ID BIGINT DEFAULT 0;
	DECLARE vRecord VARCHAR(1) DEFAULT '';
	DECLARE vPARSED_RECORDCOUNT BIGINT DEFAULT 0;
	DECLARE vINSERT_RECORDCOUNT BIGINT DEFAULT 0;
	DECLARE vUPDATE_RECORDCOUNT BIGINT DEFAULT 0;
	
	SET vSRC_ROW_EFF_DT = '9999-12-31';
	SET vSRC_ROW_EXP_DT = '9999-12-31';
	
	
 
	--SELECT COUNT(*) into vCnt_Completed_Tables FROM RWW5.CONFIG_TBLMAPPING WHERE ACTIVE_ROW='Y';
	IF (SELECT COUNT(*)  FROM RWW5.LOG_Activity) = 0 THEN
		SET vBatchNum = 1;
	ELSE
		SELECT MAX(COALESCE(BATCH,0)) + 1 INTO vBatchNum FROM RWW5.LOG_Activity;	
	END IF;
	
	
	-- COMMENT#: TO IDENTIFY WHETHER ITS FRESH START OR NEED TO IMPORT THE REMAINING TABLES
	SELECT COUNT(*) into vCnt_Remaining_Tables_OT FROM RWW5.CONFIG_TBLMAPPING WHERE TAB_DATA_DECISION='N';
	SELECT COUNT(*) into vCnt_Remaining_Tables_DF FROM RWW5.CONFIG_TBLMAPPING WHERE TAB_DATA_DECISION='Y';
	SELECT COUNT(*) into vCnt_Remaining_Tables FROM RWW5.CONFIG_TBLMAPPING WHERE ACTIVE_ROW='Y';
	 
	IF ((vCnt_Remaining_Tables = vCnt_Remaining_Tables_DF) OR (vCnt_Remaining_Tables = vCnt_Remaining_Tables_OT)) THEN
	 	IF vCnt_Remaining_Tables = vCnt_Remaining_Tables_DF THEN
	 		SET vDecFlag = 'Y';
	 	ELSE
	 		SET vDecFlag = 'N';
	 	END IF;
		--COMMENT#: TAKING BACKUP OF IDENTITY TABLE
		INSERT INTO RWW5.LOG_CONFIG_Dest_IDENTITY (BATCH,Parent_Config_ROWID,Child_Config_ROWID,Child_PK_Col_Nm,Src_PARENT_COL_VALUE,Dest_IDENTITY,CREATE_DT)
		SELECT CASE WHEN vBatchNum = 1 THEN vBatchNum ELSE vBatchNum - 1 END,Parent_Config_ROWID,Child_Config_ROWID,Child_PK_Col_Nm,Src_PARENT_COL_VALUE,Dest_IDENTITY,CREATE_DT 
		FROM RWW5.CONFIG_Dest_IDENTITY
		WHERE PARENT_CONFIG_ROWID IN (SELECT TBL_ROWID FROM RWW5.CONFIG_TBLMAPPING WHERE TAB_DATA_DECISION = vDecFlag);
		
		INSERT INTO RWW5.LOG_RECORDCOUNT (BATCH, TBL_ROWID, SRC_TABLESCHEMA, SRC_TABLENAME,DEST_TABLESCHEMA, DEST_TABLENAME, PARSED_RECORDCOUNT, INSERT_RECORDCOUNT,UPDATE_RECORDCOUNT,ImportStatus)
		SELECT CASE WHEN vBatchNum = 1 THEN vBatchNum ELSE vBatchNum - 1 END, TBL_ROWID, SRC_TABLESCHEMA, SRC_TABLENAME,DEST_TABLESCHEMA, DEST_TABLENAME, PARSED_RECORDCOUNT, INSERT_RECORDCOUNT,UPDATE_RECORDCOUNT
		,ImportStatus
  		FROM RWW5.CONFIG_TBLMAPPING WHERE TAB_DATA_DECISION = vDecFlag;
		
		-- COMMENT#: ONLY DELETE THE IDENTITY DETAILS FOR REQUIRED SET OF FEEDS EITHER DAILY OR ONE TIME FEED
		DELETE FROM RWW5.CONFIG_Dest_IDENTITY WHERE PARENT_CONFIG_ROWID IN (SELECT TBL_ROWID FROM RWW5.CONFIG_TBLMAPPING WHERE TAB_DATA_DECISION = vDecFlag);
		
	
	END IF;
	--#Comment:CLEARING THE DEBUGTEXT TABLE
	DELETE FROM RWW5.debugtext;
	UPDATE RWW5.CONFIG_TBLMAPPING SET PARSED_RECORDCOUNT = 0,INSERT_RECORDCOUNT = 0,UPDATE_RECORDCOUNT = 0 WHERE ACTIVE_ROW='Y';
	

		 
    --get the default value for created_by 
   	IF (SELECT count(*) FROM RWW5.PB_USERS WHERE USER_NAME = 'GBSVBATCH') = 1 then 
         SELECT CAST(USER_ID AS VARCHAR(50)) into vCreated_by FROM RWW5.PB_USERS WHERE USER_NAME = 'GBSVBATCH';
    END IF;
	
	BEGIN
   		--#Comment: Declare cursor FOR LOOPING THROUGH CONFIGTABLE
		--/* # COURSOR COMMENT CHANGES -
		 DECLARE ConfigTable_Cursor INSENSITIVE CURSOR WITH HOLD for
			SELECT TBL_ROWID,Src_TableSchema,Src_TableName,Src_Table_IDCOLNAME,Dest_TableSchema,Dest_TableName,DEST_PARENT_SCHM_TBLENM,
			TAB_DATA_DECISION,Tab_Data_Dec_DestRecordCheckTabNm,Tab_Data_Dec_SrcColumnNm,Tab_Data_Src_CHAR_DATATYPE,Tab_Data_Dec_DestColumnNm 
			,Tab_Data_Dest_CHAR_DATATYPE,Tab_Data_Dest_DOMINST,Tab_Data_Dest_DOMID ,Tab_Data_Dest_IDColNm,Tab_Data_Dec_FromJOINCond,NewData_SrcDestColmNm,
			NewData_FromJoinCond,NewData_ParentTablRef,BATCHSIZE,ImportStatus			
			FROM RWW5.CONFIG_TBLMAPPING 
			WHERE ACTIVE_ROW='Y' ORDER BY TBL_ROWID FOR READ ONLY;--AND ROW_STATUS = 'Y';
		--*/	
		
		--COMMENT: FOR ETL - CURSOR TO RETURN A STATUS
		DECLARE vReturnStatus CURSOR WITH RETURN FOR
		SELECT SQLDIS FROM SYSIBM.SYSDUMMY1;
			
		
				
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET EOF = 1 ;
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION,SQLWARNING,NOT FOUND
		BEGIN
			 GET DIAGNOSTICS EXCEPTION 1
	            vErrMsg = MESSAGE_TEXT;
			SET SQLDIS = SQLCODE;
		END;
		
			
		 
		--#ACTIVITY_INSERT
		
		INSERT INTO RWW5.LOG_Activity(BATCH,Activity_Description) VALUES (vBatchNum,'DATA LOAD: START');
						
		--# COURSOR COMMENT CHANGES -
		OPEN ConfigTable_Cursor;
	    FETCH ConfigTable_Cursor INTO vTBLRID,vSrcSchmNm,vSrcNm,vSrcIDColNm,vDestSchmNm,vDestNm,vPartTblNm,vTAB_Data_Decision,vTDD_DestChkTabNm,
	    vTDD_SrcColumnNm,vTDD_Src_CHAR_DATATYPE,vTDD_DestColumnNm,vTDD_Dest_CHAR_DATATYPE,vTDD_Dest_DOMINST,vTDD_Dest_DOMID,vTDD_DestIDColNm,vTDD_FromJOINCond
	    ,vND_SrcDest_ColmNm,vND_FromJOINCond,vND_ParentTablRef,vBatchSize,vPrev_ImportStatus;
	    SET vConfigTblCrsr_Open = 'Y';
	    	
		--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ( 'OUTSIDE WHILE: EOF',EOF);
		WHILE (EOF = 0) DO	
		--WHILE (vRecord = 'F' OR vRecord IS NULL OR vRecord='') DO	
			BEGIN
		
				DECLARE EOF1 SMALLINT DEFAULT 0 ;
		    	DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET EOF1 = 1;
		    	
		    	
		    	SET vSvePointDeclared = 'N';
		    	SET vRecordCount = 1;
		    	
		    	SET vPARSED_RECORDCOUNT = 0;
				SET vINSERT_RECORDCOUNT = 0;
				SET vUPDATE_RECORDCOUNT = 0;
		    	--SET vDEST_ID = 0;

				--START_CONFIG_LOAD:		
				/*SELECT CASE WHEN (SELECT MAX(TBL_ROWID) FROM RWW5.CONFIG_TBLMAPPING WHERE ACTIVE_ROW='Y')  = TBL_ROWID THEN 'L' ELSE 'F' END, TBL_ROWID,Src_TableSchema,Src_TableName,Src_Table_IDCOLNAME,Dest_TableSchema,Dest_TableName,DEST_PARENT_SCHM_TBLENM,
				TAB_DATA_DECISION,Tab_Data_Dec_DestRecordCheckTabNm,Tab_Data_Dec_SrcColumnNm,Tab_Data_Src_CHAR_DATATYPE,Tab_Data_Dec_DestColumnNm 
				,Tab_Data_Dest_CHAR_DATATYPE,Tab_Data_Dest_DOMINST,Tab_Data_Dest_DOMID ,Tab_Data_Dest_IDColNm,Tab_Data_Dec_FromJOINCond,NewData_SrcDestColmNm,
				NewData_FromJoinCond,NewData_ParentTablRef,BATCHSIZE,ImportStatus
				INTO vRecord,vTBLRID,vSrcSchmNm,vSrcNm,vSrcIDColNm,vDestSchmNm,vDestNm,vPartTblNm,vTAB_Data_Decision,vTDD_DestChkTabNm,
			    vTDD_SrcColumnNm,vTDD_Src_CHAR_DATATYPE,vTDD_DestColumnNm,vTDD_Dest_CHAR_DATATYPE,vTDD_Dest_DOMINST,vTDD_Dest_DOMID,vTDD_DestIDColNm,vTDD_FromJOINCond
			    ,vND_SrcDest_ColmNm,vND_FromJOINCond,vND_ParentTablRef,vBatchSize,vPrev_ImportStatus
				FROM RWW5.CONFIG_TBLMAPPING 
				WHERE ACTIVE_ROW='Y' AND TBL_ROWID = (SELECT MIN(TBL_ROWID) FROM RWW5.CONFIG_TBLMAPPING WHERE ACTIVE_ROW='Y') ORDER BY TBL_ROWID FOR READ ONLY WITH UR;
				*/
				
				--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ( 'EOF',EOF);
				
				IF EOF1 = 1 THEN
					SET EOF1 = 0;
				END IF;		    
				
				--INSERT INTO RWW5.debugtext (VARNAME,VTEXT) VALUES  ( 'vRecord',vRecord);	
		    	
		    	--COMMENT#: NO ACTIVE RECORDS LEFT
		    	--IF vRecord IS NULL OR vRecord='' THEN
		    		--GOTO ACTIVITY_END;
		    	--END IF;
		    	
		    	--COMMENT#: LIST OF vQry_LineNum to be Logged everytime - ANY CHANGES TO LOG_QUERY linenum the same to be replicated below
		    	SET vQry_LineNum_LOGGED ='776,807,862,99,110,208,279,307,311,536,558,579,617,722,811,635,707,659,850';
		    	
		    	--COMMENT#: TABLE IS ONLY A PARENT 
		    	IF ((vPartTblNm IS NULL OR vPartTblNm = '') 
		    	AND	(((SELECT COUNT(*) FROM RWW5.CONFIG_TBLMAPPING WHERE DEST_PARENT_SCHM_TBLENM LIKE '%'||vDestSchmNm||'.'||vDestNm||'%' AND TAB_DATA_DECISION = vTAB_Data_Decision) >= 1)
		    	OR ((SELECT COUNT(*) FROM RWW5.CONFIG_TBLMAPPING WHERE DEST_PARENT_SCHM_TBLENM LIKE '%'||vDestSchmNm||'.'||vDestNm||'%' AND TAB_DATA_DECISION = vTAB_Data_Decision) = 0)))	 THEN
		    	   	SET vParent_Table_Flag = 'Y';
			    
		    	--COMMENT#: TABLE IS ONLY A CHILD
		    	ELSEIF ((vPartTblNm IS NOT NULL AND vPartTblNm <> '') AND (SELECT COUNT(*) FROM RWW5.CONFIG_TBLMAPPING WHERE DEST_PARENT_SCHM_TBLENM LIKE '%'||vDestSchmNm||'.'||vDestNm||'%' AND TAB_DATA_DECISION = vTAB_Data_Decision) = 0) THEN
					SET vParent_Table_Flag = 'N';
					   	
		    	--COMMENT#: TABLE IS A PARENT AND CHILD
		    	ELSEIF ((vPartTblNm IS NOT NULL AND vPartTblNm <> '') AND (SELECT COUNT(*) FROM RWW5.CONFIG_TBLMAPPING WHERE DEST_PARENT_SCHM_TBLENM LIKE '%'||vDestSchmNm||'.'||vDestNm||'%' AND TAB_DATA_DECISION = vTAB_Data_Decision) >= 1) THEN
		    		SET vParent_Table_Flag = 'YN';
		    	END IF;
		    	--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'vParent_Table_Flag ',vParent_Table_Flag);
		    	--COMMENT#: vParent_Table_Flag cannot be BLANK
		    	IF vParent_Table_Flag IS NULL OR vParent_Table_Flag = '' THEN
		    		GOTO ROLLBACK_TO_SAVEPOINT_RSCrsr;
		    	END IF;
		    	
		    	-- COMMENT#:SOURCE & DESTINATION COLUMN LIST FOR SOURCE PRIMARY COLUMN LIST WITHOUT COLUMNS WITH DOM INST
				SELECT
				-- COMMENT#:SELECT COLUMN LIST 
				SUBSTR(CAST(LISTAGG('COALESCE('||COALESCE(SRC_COLUMNNAME,'') || CASE WHEN DEST_COL_CHAR_DATATYPE = 'Y' THEN  ','''|| COALESCE(DEST_DEFAULT_VAL,'') ||'''),' ELSE ',0),' END ,'')within group (order by COL_ROWID) as CLOB(451375)),1
				,LENGTH(CAST(LISTAGG('COALESCE('||COALESCE(SRC_COLUMNNAME,'') || CASE WHEN DEST_COL_CHAR_DATATYPE = 'Y' THEN  ','''|| COALESCE(DEST_DEFAULT_VAL,'') ||'''),' ELSE ',0),' END,'')within group (order by COL_ROWID) as CLOB(1451375)))-1)
				-- COMMENT#:INSERT COLUMN LIST
				,SUBSTR(CAST(LISTAGG(COALESCE(DEST_COLUMNNAME,'') || ',','')within group (order by COL_ROWID) as CLOB(451375)),1,LENGTH(CAST(LISTAGG(COALESCE(DEST_COLUMNNAME,'') || ',','')within group (order by COL_ROWID) as CLOB(1451375)))-1)   
				   	INTO vSrcColNm,vDestColNm 
				FROM RWW5.CONFIG_TBLCOLMAPPING COLMAP  
				WHERE COLMAP.TBL_COL_ROWID = vTBLRID AND COLMAP.ACTIVE_ROW='Y' AND COLMAP.Dest_DOM_Inst='N'
				--- COMMENT#: IGNORING THE CHILD FOREIGN KEY WHICH IS ASSOCIATED WITH A PARENT
				AND COLMAP.Dest_Tabl_PK = 'N';
							
				--COMMENT#: DOM INSTANCE COLUMN NAME FOR INSERT AND SELECT SCRIPT
				SELECT SUBSTR(CAST(LISTAGG(COALESCE(DEST_COLUMNNAME,'') || ',','')within group (order by COL_ROWID) as CLOB(451375)),1,LENGTH(CAST(LISTAGG(COALESCE(DEST_COLUMNNAME,'') || ',','')within group (order by COL_ROWID) as CLOB(1451375)))-1)
				,LEFT(CAST(LISTAGG(
				'COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID WHERE (DI.DOM_ID='||COALESCE(Dest_DOM_ID,'')||' AND CODE =COALESCE(RTRIM(LTRIM('||COALESCE(SRC_COLUMNNAME,'')||')),'''')) OR (0 ='||COALESCE(Dest_DOM_ID,'')||' AND CODE =COALESCE(RTRIM(LTRIM('||COALESCE(SRC_COLUMNNAME,'')||')),'''')) ORDER BY DOM_INST_ID fetch first 1 rows only),00000)'
				|| ',','')within group (order by COL_ROWID) as CLOB(451375)),
				LENGTH(CAST(LISTAGG(
				'COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID WHERE (DI.DOM_ID='||COALESCE(Dest_DOM_ID,'')||' AND CODE =COALESCE(RTRIM(LTRIM('||COALESCE(SRC_COLUMNNAME,'')||')),'''')) OR (0 ='||COALESCE(Dest_DOM_ID,'')||' AND CODE =COALESCE(RTRIM(LTRIM('||COALESCE(SRC_COLUMNNAME,'')||')),'''')) ORDER BY DOM_INST_ID fetch first 1 rows only),00000)'
				|| ',','')within group (order by COL_ROWID) as CLOB(451375)))-1)
				INTO vSrcColNm_DomInst_COLNM,vSrcColNm_DomInst_forSELECT 	
				FROM RWW5.CONFIG_TBLCOLMAPPING COLMAP 
				WHERE COLMAP.TBL_COL_ROWID = vTBLRID AND COLMAP.ACTIVE_ROW='Y'  AND COLMAP.Dest_DOM_INST='Y';
				
				
				
				--COMMENT#: ERROR- > -137   THE LENGTH RESULTING FROM operation IS GREATER THAN maximum-length FOR LISTAGG
				IF SQLDIS=-137 THEN
				
					SET SQLDIS = 0;
					SET vErrMsg = '';
					SELECT SUBSTR(CAST(LISTAGG(COALESCE(DEST_COLUMNNAME,'') || ',','')within group (order by COL_ROWID) as CLOB(451375)),1,LENGTH(CAST(LISTAGG(COALESCE(DEST_COLUMNNAME,'') || ',','')within group (order by COL_ROWID) as CLOB(1451375)))-1)
					,CAST(LISTAGG(COALESCE(Dest_DOM_ID,'')||'&'|| COALESCE(SRC_COLUMNNAME,'')||'AAAA'||COALESCE(Dest_DOM_ID,'')||'BBBB'|| COALESCE(SRC_COLUMNNAME,'') || ',','')within group (order by COL_ROWID) as CLOB(451375012))
					INTO vSrcColNm_DomInst_COLNM,vSrcColNm_DomInst_forSELECT 	
					FROM RWW5.CONFIG_TBLCOLMAPPING COLMAP 
					WHERE COLMAP.TBL_COL_ROWID = vTBLRID AND COLMAP.ACTIVE_ROW='Y'  AND COLMAP.Dest_DOM_INST='Y';
					
					SELECT REPLACE ( 
					REPLACE('COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID WHERE (DI.DOM_ID=''||' || 
					REPLACE(
							REPLACE(
									REPLACE(
											REPLACE(
													LEFT(vSrcColNm_DomInst_forSELECT,LENGTH(vSrcColNm_DomInst_forSELECT)-1)
													,'&','||'' AND CODE =COALESCE(RTRIM(LTRIM(''||')
											,'AAAA','||''))CCC'''')) OR (0 =''||')
									,'BBBB','||'' AND CODE =COALESCE(RTRIM(LTRIM(''||')
							,',','||'')),'''')) ORDER BY DOM_INST_ID fetch first 1 rows only),00000),COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID WHERE (DI.DOM_ID=''||')
					||'||'')),'''')) ORDER BY DOM_INST_ID fetch first 1 rows only),00000)','||','')
					,'CCC',',')
					INTO  vSrcColNm_DomInst_forSELECT
					FROM SYSIBM.SYSDUMMY1;
										
				END IF;
				
				--INSERT INTO RWW5.debugtext (VTEXT) VALUES  ( 'IF FIRST PART CALLED LINE#265');
		    	
		    	IF (vTAB_Data_Decision = 'Y' OR
		    	--COMMENT#: DUE TO BATCH WISE INSERT - TO SKIP ALREADY INSERTED RECORDS IN CASE OF ONE TIME FEED AND PREVIOUS IMPORT WAS NOT COMPLETED SUCCESSFULLY 
		    	(vTAB_Data_Decision = 'N' AND (vTDD_DestChkTabNm IS NOT NULL OR vTDD_DestChkTabNm <>'') AND
		    		(
		    			(vPrev_ImportStatus = 'ERROR' OR vPrev_ImportStatus = '')
		    		OR
		    		--COMMENT: HARDCODED THE BELOW VALUES - as ADVR & SALES_REPS details are only expected from DAILY FEED / HBM+, SO IN CASE OF ONETIME/UNUM FEED THE ID COLUMN MUST BE FETCHED
		    		-- FROM EXISTING RECORDS.
		    			(vDestNm = 'PLN_SPONSR_SALES_REPS' OR vDestNm = 'PLN_SPONSR_ADVRS')
		    		)
		    	)
		    	)
		    	--COMMENT#: FOR TABLES WHERE THERE IS NO CHECK CONDITION DEFINED, ESPECIALLY IN ONE TIME / UNUM FEED 
		    	AND vTDD_DestChkTabNm IS NOT NULL AND vTDD_DestChkTabNm <> '' 
		    	THEN
		    		--INSERT INTO RWW5.debugtext (VTEXT) VALUES  ( 'INSIDE IF FIRST PART CALLED LINE#282');
		    		--COMMENT#: IN CASE OF DAILY FEED ONE SOURCE TABLE IS USE TO FORM RECORDS FOR MORE THAN ONE DESTINATION TABLE RECORDS, 
			    	---SO WHEN THE SOURCE TABLE IS NOT READ FURTHER BY ANY DESTINATION TABLE THEN ITS RESPECTIVE RECORDS READ STATUS MUST BE UPDATED TO 'R', ELSE ITS MUST STAY 'UR' FOR SUBSEQUENT TABLES TO READ IT
			    	SET vUPDATE_TABLE_READSTATUS = 'N';
			    	IF (SELECT COUNT(*) FROM RWW5.CONFIG_TBLMAPPING CTM INNER JOIN RWW5.CONFIG_TBLCOLMAPPING CCM ON CTM.TBL_ROWID = CCM.TBL_COL_ROWID 
						INNER JOIN RWW5.CONFIG_TBLMAPPING CTM1 ON CTM1.Src_TableSchema =CTM.Src_TableSchema AND CTM1.Src_TableName=CTM.Src_TableName
						INNER JOIN RWW5.CONFIG_TBLCOLMAPPING CCM1 ON CTM1.TBL_ROWID = CCM1.TBL_COL_ROWID 
						WHERE CTM.ACTIVE_ROW='Y' AND CTM1.ACTIVE_ROW='Y' AND CTM.Src_TableSchema = vSrcSchmNm AND CTM.Src_TableName = vSrcNm
						AND  CTM1.TBL_ROWID > CTM.TBL_ROWID AND CTM.TBL_ROWID=vTBLRID
						AND 
						--CURRENT & SUBSEQUENT SRC TABLE AND WHERE CLAUSE ARE MATCHING EG: PMB -> PM, PMB -> PMP, PMB -> PMB
						((CCM1.SRC_CONDITION_VAL = CCM.SRC_CONDITION_VAL AND CCM1.SRC_CONDITION_VAL IS NOT NULL AND CCM1.SRC_CONDITION_VAL <>'' 
						AND CCM.SRC_CONDITION_VAL IS NOT NULL AND CCM.SRC_CONDITION_VAL <>'') 
						OR 
						(CCM1.SRC_CONDITION_COLNM = CCM.SRC_CONDITION_COLNM AND CCM1.SRC_CONDITION_COLNM IS NOT NULL AND CCM1.SRC_CONDITION_COLNM<>''
						AND CCM.SRC_CONDITION_COLNM IS NOT NULL AND CCM.SRC_CONDITION_COLNM<>'')
						OR
						--CURRENT & SUBSEQUENT SRC TABLE IS MATCHING, WHERE CLAUSE & DESTINATION TABLE NAMES ARE NOT MATCHING EG: PSD -> PS, PSD -> PSD
						CTM1.DEST_PARENT_SCHM_TBLENM LIKE '%'||CTM.Dest_TableSchema||'.'||CTM.Dest_TableName||'%')
					 	) = 0 
					 	AND vTAB_Data_Decision = 'Y' 
					 THEN
			    		SET vUPDATE_TABLE_READSTATUS = 'Y';
			    	END IF;
			    	
			    	--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'vND_SrcDest_ColmNm ',vND_SrcDest_ColmNm);
			    	
		    		--COMMENT#: NEW DATA JOIN CONDITION HAS 2 OR MORE PARENT TABLE REFRENCES, WHICH NEEDS TO CALCULATED IN THE CHILD SP
		    		IF LOCATE('||',vND_SrcDest_ColmNm) > 0 THEN
		    			SET vOrginal_ND_SrcDest_ColmNm = vND_SrcDest_ColmNm;
		    			SET vND_SrcDest_ColmNm = REPLACE(vTDD_Dest_CHAR_DATATYPE,'Y','N');
		    		ELSE
		    			SET vOrginal_ND_SrcDest_ColmNm = '';
		    		END IF;
		    		
			    	--COMMENT#: IF REULT IS XERO MEANS THERE IS NO COMMA SO ITS SINGLE COLUMN
	    			IF (LENGTH(vTDD_SrcColumnNm) - LENGTH(REPLACE(vTDD_SrcColumnNm,',',''))) = 0 THEN
	    				SELECT  
		    			-- COMMENT# WHERE CLAUSE FOR THE DESTINATION TABLE TO IDENTIFY WHETHER OR NOT DATA EXISTS
		    			-- EXAMPLE : STRING TO BE GENERATED AS -> 'DEST_COLNM'|| = ||'''SRC_COLNM'''
		    			-- SO WHEN DESTINATION QUERY IS EXEXCUTED ITH WILL BE:
		    			-- FINAL QUERY: SELECT COUNT(*) FROM DEST_TABLE WHERE DEST_COLNM = '2154654'
		    			
							CAST(LISTAGG('''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
							CASE WHEN DestDOMINST.COLUMN_VALUES = 'Y' THEN
								--- COMMENT#: IN DESTINATION TABLE WHEN COLUMN IS INT AS FETCH FROM DOMINSTANCE TABLE
								-- EXPECTED : A.PROD =  COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM_INST where CODE ='BD' ORDER BY DOM_INST_ID fetch first 1 rows only),00000)
								CASE WHEN SrcCharType.COLUMN_VALUES = 'Y' THEN 
								' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'' ) OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) ''' 
								ELSE 
								' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) ''' END --,'') within group (order by SrcColNm.ID) as CLOB(451375))
							ELSE
								--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
								CASE WHEN SrcCharType.COLUMN_VALUES = 'Y' THEN 
								--COMMENT#: REPLACE FUNCTION IS TO REPLACE THE QUOTES (') IN DATA
								' = '''''' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') || '''''''' ' 
								ELSE 
								' = '' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') ||'' ' END 
							END
							,'') within group (order by SrcColNm.ID) as CLOB(451375))
							,
							--COMMENT#: CONSIDER ONLY THE COLUMN NAMES WHICH ARE TAGGED AS 'Y'							
							CAST(LISTAGG( CASE WHEN NDDestColmnm.COLUMN_VALUES = 'Y' THEN
								'''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
								CASE WHEN DestDOMINST.COLUMN_VALUES = 'Y' THEN
									--- COMMENT#: IN DESTINATION TABLE WHEN COLUMN IS INT AS FETCH FROM DOMINSTANCE TABLE
									-- EXPECTED : A.PROD =  COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM_INST where CODE ='BD' ORDER BY DOM_INST_ID fetch first 1 rows only),00000)
									CASE WHEN SrcCharType.COLUMN_VALUES = 'Y' THEN 
									' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'' ) OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) ''' 
									ELSE 
									' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) ''' END --,'') within group (order by SrcColNm.ID) as CLOB(451375))
								ELSE
									--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
									CASE WHEN SrcCharType.COLUMN_VALUES = 'Y' THEN 
									' = '''''' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') || '''''''' ' 
									ELSE 
									' = '' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') ||'' ' END 
								END
								ELSE ''
								END,'') within group (order by SrcColNm.ID) as CLOB(451375))
							
								
						INTO vTDD_Where_Clause,vND_Where_Clause
						
						FROM (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_SrcColumnNm,','))) as SrcColNm
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Src_CHAR_DATATYPE,','))) as SrcCharType ON SrcColNm.ID = SrcCharType.ID
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_DestColumnNm,','))) as DestColNm ON SrcColNm.ID = DestColNm.ID 
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_CHAR_DATATYPE,','))) as DestCharType ON DestColNm.ID = DestCharType.ID
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_DOMINST,','))) as DestDOMINST ON DestColNm.ID = DestDOMINST.ID
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_DOMID,','))) as DestDOMID ON DestColNm.ID = DestDOMID.ID
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vND_SrcDest_ColmNm,','))) as NDDestColmnm ON NDDestColmnm.ID = DestColNm.ID;
						
						
						
						
	    			ELSE
	    				--COMMENT# BELOW IF WAS TO SET LENGHT SUBTRACTION IN CASE OF NO VALUE TO LENGHT()-<value> IN was giving an error for SUBSTR 
	    				IF (SELECT COUNT(*) FROM (SELECT COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vND_SrcDest_ColmNm,','))) AS A WHERE A.COLUMN_VALUES='Y')>=1 THEN
	    					SET vI = 9;
	    				ELSE
	    					SET vI = 0;
	    				END IF;
	    				
	    				SELECT	    				 
		    			-- COMMENT# WHERE CLAUSE FOR THE DESTINATION TABLE TO IDENTIFY WHETHER OR NOT DATA EXISTS
		    			-- EXAMPLE : STRING TO BE GENERATED AS -> 'DEST_COLNM'|| = ||'''SRC_COLNM'''
		    			-- SO WHEN DESTINATION QUERY IS EXEXCUTED ITH WILL BE:
		    			-- FINAL QUERY: SELECT COUNT(*) FROM DEST_TABLE WHERE DEST_COLNM = '2154654'
		    			SUBSTR( --- COMMENT#: 
							CAST(LISTAGG('''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
							
							--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
								CASE WHEN DestCharType.COLUMN_VALUES = 'Y' THEN 
								' = '''''' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES ||','''''''',''''''''''''),'''') || '''''' AND '' || ','')  
								ELSE 
								' = '' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES ||','''''''',''''''''''''),'''') || '' AND '' || ','')  END 
							 
							,'') within group (order by SrcColNm.ID) as CLOB(451375))
						 ,1,LENGTH(CAST(LISTAGG('''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
							
							--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
								CASE WHEN DestCharType.COLUMN_VALUES = 'Y' THEN 
								' = '''''' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES ||','''''''',''''''''''''),'''') || '''''' AND '' || ','')  
								ELSE 
								' = '' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES ||','''''''',''''''''''''),'''') || '' AND '' || ','')  END 
														 
							,'') within group (order by SrcColNm.ID) as CLOB(451375))
						)-9) ||''''
						,
						--COMMENT#: CONSIDER ONLY THE COLUMN NAMES WHICH ARE TAGGED AS 'Y'							
							
								SUBSTR( --- COMMENT#: 
								CAST(LISTAGG(
								CASE WHEN NDDestColmnm.COLUMN_VALUES = 'Y' THEN
								'''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
								
								--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
									CASE WHEN DestCharType.COLUMN_VALUES = 'Y' THEN 
									' = '''''' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES ||','''''''',''''''''''''),'''') || '''''' AND '' || ','')  
									ELSE 
									' = '' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES ||','''''''',''''''''''''),'''') || '' AND '' || ','')  END 
								 
								ELSE '' END,'') within group (order by SrcColNm.ID) as CLOB(451375))
							 ,1,LENGTH(CAST(LISTAGG(
							 CASE WHEN NDDestColmnm.COLUMN_VALUES = 'Y' THEN
							 '''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
								
								--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
									CASE WHEN DestCharType.COLUMN_VALUES = 'Y' THEN 
									' = '''''' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES ||','''''''',''''''''''''),'''') || '''''' AND '' || ','')  
									ELSE 
									' = '' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES ||','''''''',''''''''''''),'''') || '' AND '' || ','')  END 
															 
								ELSE '' END,'') within group (order by SrcColNm.ID) as CLOB(451375))
							)-vI) ||''''
							
						
						INTO vTDD_Where_Clause,vND_Where_Clause
						
						FROM (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_SrcColumnNm,','))) as SrcColNm
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Src_CHAR_DATATYPE,','))) as SrcCharType ON SrcColNm.ID = SrcCharType.ID
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_DestColumnNm,','))) as DestColNm ON SrcColNm.ID = DestColNm.ID
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_CHAR_DATATYPE,','))) as DestCharType ON DestColNm.ID = DestCharType.ID
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_DOMINST,','))) as DestDOMINST ON DestColNm.ID = DestDOMINST.ID
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_DOMID,','))) as DestDOMID ON DestColNm.ID = DestDOMID.ID
						INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vND_SrcDest_ColmNm,','))) as NDDestColmnm ON NDDestColmnm.ID = DestDOMID.ID
						WHERE DestDOMINST.COLUMN_VALUES = 'N';
						
						
						--COMMENT#: DOM_INST PRESENT IN CONFIG FOR DATA LOAD
						
						
						IF (SELECT COUNT(*) FROM (SELECT COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_DOMINST,','))) AS A WHERE A.COLUMN_VALUES='Y')>=1 THEN
							
							--COMMENT# BELOW IF WAS TO SET LENGHT SUBTRACTION IN CASE OF NO VALUE TO LENGHT()-<value> IN was giving an error for SUBSTR 
		    				IF (SELECT COUNT(*) FROM (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vND_SrcDest_ColmNm,','))) AS A
		    				INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_DOMINST,','))) AS B ON A.COLUMN_VALUES = B.COLUMN_VALUES AND A.ID = B.ID
		    				WHERE B.COLUMN_VALUES='Y')
		    				>=1 THEN
		    					SET vI = 8;
		    				ELSE
		    					SET vI = 0;
		    				END IF;
							
							
							SELECT  
			    			-- COMMENT# WHERE CLAUSE FOR THE DESTINATION TABLE TO IDENTIFY WHETHER OR NOT DATA EXISTS
			    			-- EXAMPLE : STRING TO BE GENERATED AS -> 'DEST_COLNM'|| = ||'''SRC_COLNM'''
			    			-- SO WHEN DESTINATION QUERY IS EXEXCUTED ITH WILL BE:
			    			-- FINAL QUERY: SELECT COUNT(*) FROM DEST_TABLE WHERE DEST_COLNM = '2154654'
			    			SUBSTR( --- COMMENT#: 
								CAST(LISTAGG('''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
							
									--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
									CASE WHEN DestCharType.COLUMN_VALUES = 'Y' THEN 
									' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'' ) OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||' 
									ELSE 
									' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||' END --,'') within group (order by SrcColNm.ID) as CLOB(451375))
							 
								,'') within group (order by SrcColNm.ID) as CLOB(451375))
							 ,1,LENGTH(CAST(LISTAGG('''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
							
									--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
									CASE WHEN DestCharType.COLUMN_VALUES = 'Y' THEN 
									' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || '''''''' ||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||' 
									ELSE 
									' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000)  AND ''||' END --,'') within group (order by SrcColNm.ID) as CLOB(451375))
														 
								,'') within group (order by SrcColNm.ID) as CLOB(451375))
							)-7) ||''''
								,
							--COMMENT#: CONSIDER ONLY THE COLUMN NAMES WHICH ARE TAGGED AS 'Y'							
						
								SUBSTR( --- COMMENT#: 
								CAST(LISTAGG( 
									CASE WHEN NDDestColmnm.COLUMN_VALUES = 'Y' THEN
										'''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
									
											--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
											CASE WHEN DestCharType.COLUMN_VALUES = 'Y' THEN 
											' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'' ) OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||' 
											ELSE 
											' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||' END --,'') within group (order by SrcColNm.ID) as CLOB(451375))
						 
								ELSE ' ' END,'') within group (order by SrcColNm.ID) as CLOB(451375))
							 	,1,LENGTH(CAST(LISTAGG( CASE WHEN NDDestColmnm.COLUMN_VALUES = 'Y' THEN
							 				'''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
									
											--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
											CASE WHEN DestCharType.COLUMN_VALUES = 'Y' THEN 
											' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || '''''''' ||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||' 
											ELSE 
											' = COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM D INNER JOIN '|| vDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000)  AND ''||' END --,'') within group (order by SrcColNm.ID) as CLOB(451375))
																 
								ELSE ' ' END,'') within group (order by SrcColNm.ID) as CLOB(451375))
								)-vI) ||''''
							
							
							INTO vTDD_Where_Clause_1,vND_Where_Clause_1
							
							FROM (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_SrcColumnNm,','))) as SrcColNm
							INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Src_CHAR_DATATYPE,','))) as SrcCharType ON SrcColNm.ID = SrcCharType.ID
							INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_DestColumnNm,','))) as DestColNm ON SrcColNm.ID = DestColNm.ID
							INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_CHAR_DATATYPE,','))) as DestCharType ON DestColNm.ID = DestCharType.ID
							INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_DOMINST,','))) as DestDOMINST ON DestColNm.ID = DestDOMINST.ID
							INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_Dest_DOMID,','))) as DestDOMID ON DestColNm.ID = DestDOMID.ID
							INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vND_SrcDest_ColmNm,','))) as NDDestColmnm ON NDDestColmnm.ID = DestDOMID.ID
							WHERE DestDOMINST.COLUMN_VALUES = 'Y';
							
							SET vTDD_Where_Clause = COALESCE(vTDD_Where_Clause,'') ||' ||'' AND ''|| ' || COALESCE(vTDD_Where_Clause_1,'');
							
							IF (LENGTH(RTRIM(LTRIM(vND_Where_Clause_1))) = 1 OR  vND_Where_Clause_1 IS NULL) THEN
	    						SET vND_Where_Clause_1 = '';
	    					END IF;
							
							IF vND_Where_Clause_1 <> '' AND vND_Where_Clause_1 IS NOT NULL THEN
								SET vND_Where_Clause = COALESCE(vND_Where_Clause,'') ||' ||'' AND ''|| ' || COALESCE(vND_Where_Clause_1,'');
							END IF;
							
						END IF;
	    			END IF;
	    			
	    			IF LENGTH(RTRIM(LTRIM(vND_Where_Clause))) = 1 THEN
	    				SET vND_Where_Clause = '';
	    			END IF;
	    			
	    			
					--COMMENT#: IF REULT IS XERO MEANS THERE IS NO COMMA SO ITS SINGLE COLUMN
	    			IF (LENGTH(vTDD_DestIDColNm) - LENGTH(REPLACE(vTDD_DestIDColNm,',',''))) = 0 THEN
	    				SELECT  
		    			-- COMMENT# WHERE CLAUSE FOR THE DESTINATION TABLE TO ---- UPDATE ---- THE EXISTING RECORD
			    				CAST(LISTAGG('''' ||
								CASE WHEN LOCATE('.',COALESCE(DestIDColNm.COLUMN_VALUES,'')) > 0 THEN
			    					SUBSTR(COALESCE(DestIDColNm.COLUMN_VALUES,''),LOCATE('.',COALESCE(DestIDColNm.COLUMN_VALUES,'')) + 1)	
			    				ELSE
			    					COALESCE(DestIDColNm.COLUMN_VALUES,'') 
			    				END  
								 || 
								--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
								
								' = '' || COALESCE(REPLACE('|| COALESCE(DestIDColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''')  ' 
								
								,'') within group (order by DestIDColNm.ID) as CLOB(451375))
								
						INTO vTDD_Dest_Col_ID
						
						FROM (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_DestIDColNm,','))) as DestIDColNm;
						
						
	    			ELSE
	    				SELECT 
						-- COMMENT# WHERE CLAUSE FOR THE DESTINATION TABLE TO ---- UPDATE ---- THE EXISTING RECORD
			    			SUBSTR( --- COMMENT#: WHEN WHERE CLAUSE IS EXECUTED CHILD COLUMN NAME SHOULD BE ON LEFT SIDE OF '='
			    				--COMMENT#: BELOW SUBSTRING IS ADDED TO REMOVE TABLE REFERENCE WHEN COLUMN WILL BE PASSED AS WHER CLAUSE IN UPDATE QUERY
			    				---EG: IN CONFIG TABLE IDCOL = C.CNTCT_ID BELOW QUERY WILL CREATE 'C.CNTCT_ID = ' || COALESCE(C.CTNCT_ID,'') || '' C. FOR REFRRING THE COLUMN FROM JOIN CONDITION 
			    				--	WHEN IT GOES TO UPDATE QUERY FOR WHERE CLAUSE IT SHOULD BE ONLY CNTCT_ID
			    				CAST(LISTAGG('''' ||
			    				CASE WHEN LOCATE('.',COALESCE(DestIDColNm.COLUMN_VALUES,'')) > 0 THEN
			    					SUBSTR(COALESCE(DestIDColNm.COLUMN_VALUES,''),LOCATE('.',COALESCE(DestIDColNm.COLUMN_VALUES,'')) + 1)	
			    				ELSE
			    					COALESCE(DestIDColNm.COLUMN_VALUES,'') 
			    				END 
			    				 
			    				 || 
								--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
								
								' = '' || COALESCE(REPLACE('|| COALESCE(DestIDColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') || '' AND '' || ' 
								
								,'') within group (order by DestIDColNm.ID) as CLOB(451375))
							 ,1,LENGTH(	CAST(LISTAGG('''' ||
			    				CASE WHEN LOCATE('.',COALESCE(DestIDColNm.COLUMN_VALUES,'')) > 0 THEN
			    					SUBSTR(COALESCE(DestIDColNm.COLUMN_VALUES,''),LOCATE('.',COALESCE(DestIDColNm.COLUMN_VALUES,'')) + 1)	
			    				ELSE
			    					COALESCE(DestIDColNm.COLUMN_VALUES,'') 
			    				END 
			    				 
			    				 || 
								--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
								
								' = '' || COALESCE(REPLACE('|| COALESCE(DestIDColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') || '' AND '' || ' 
								
								,'') within group (order by DestIDColNm.ID) as CLOB(451375))
							)-9) || ''''
							
						INTO vTDD_Dest_Col_ID
						
						FROM (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vTDD_DestIDColNm,','))) as DestIDColNm;
						
						
	    			END IF;
		    	END IF;
		    	--#QUERYLOG_INSERT
 				IF SQLDIS < 0 THEN
 					SET vQry = 'TD_WHERECLAUSE & ND_WHERECLAUSE VARIABLES ISSUE';
	 				SET vQryID = 0;
	 				SET vQryLineNum = 640;
 					--CLOSE rsCur;
 					GOTO ROLLBACK_TO_SAVEPOINT_RSCrsr;		 					
 				END IF;
 				
 				
		    	
		    	--#ACTIVITY_INSERT
		    	
		    	--COMMENT#: IDENTIFY THE DESTINATION Table PK column
		    	--SET vQry = 'SET ? = (SELECT COLNAME FROM SYSCAT.COLUMNS WHERE IDENTITY = ''Y'' AND TABSCHEMA = '''|| COALESCE(vDestSchmNm,'') || ''' AND TABNAME = '''|| COALESCE(vDestNm,'') ||''' AND KEYSEQ > 0)';
		    	--COMMENT: HARDCODED THE SCHEMA, AS VIEWS ARE REFERRED IN THE CONFIGS
		    	SET vQry = 'SET ? = (SELECT COLNAME FROM SYSCAT.COLUMNS WHERE IDENTITY = ''Y'' AND TABSCHEMA = ''RWW5'' AND TABNAME = '''|| COALESCE(vDestNm,'') ||''' AND KEYSEQ > 0)';
			    PREPARE S1 FROM vQry;				
				EXECUTE S1 INTO vDest_PK_ColName;
				
				--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'vQry ',vQry);
		    	
				--#QUERYLOG_INSERT
				IF pLOG_Execution IS NULL 
				--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=vTBLRID AND LINENUM='558') = 0
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'659','')) <> 0)  
					THEN
		 			INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (vBatchNum,vTBLRID,'659','SPLOADCONFIG - VAR QUERY',vQry,SQLDIS);
		 			--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 			SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'659','');
		 			
		 		END IF;
			 	
		 		IF SQLDIS < 0 THEN
		 				SET vQry = vQry;
		 				SET vQryID = 0;
		 				SET vQryLineNum = 659;
		 				GOTO ROLLBACK_TO_SAVEPOINT_RSCrsr;
		 		END IF;
		 		
		 		
		 		
		 		 -- COMMENT#: SOURCE PK COLUMN NAME COMMA SEPARATED
			    SELECT 	'''''''' || SUBSTR(CAST(LISTAGG(''' || COALESCE('|| COALESCE(SRC_CHILD_TABL_COLNM_PK,'') || ','''') ||'''''',''''','')within group (order by COL_ROWID) as CLOB(451375)) ,
				1,LENGTH(CAST(LISTAGG(''' || COALESCE('|| COALESCE(SRC_CHILD_TABL_COLNM_PK,'') || ','''') ||'''''',''''','')within group (order by COL_ROWID) as CLOB(1451375)))-5)|| ''''''''
				INTO vSrc_Parent_Ref_Col_Nm
				FROM RWW5.CONFIG_TBLMAPPING TABMAP INNER JOIN RWW5.CONFIG_TBLCOLMAPPING COLMAP ON TABMAP.TBL_ROWID = COLMAP.TBL_COL_ROWID 
				WHERE TABMAP.TBL_ROWID = vTBLRID AND
				--COMMENT#: TO CONSIDER THE COLUMNS BASED ON SOURCE PK FLAG AND NOT ON BASIS OF ACTIVE COLUMN
				-- AS IN SOME CASES THERE ARE MORE PK COLUMNS THEN ACTUAL COLUMN MAPPINGS
				(('Y' = vTAB_Data_Decision AND COLMAP.Src_Tabl_PK='Y') OR
				--COMMENT#: ONE TIME FED
				('N' = vTAB_Data_Decision AND COLMAP.Src_CHILD_PK='Y')) 	
				GROUP BY TBL_COL_ROWID;
				
				SELECT CAST(LISTAGG(TBL_COL_ROWID,',') within group (order by COL_ROWID) as CLOB(1451375)),CAST(LISTAGG(SRC_COLUMNNAME,',')within group (order by COL_ROWID) as CLOB(1451375))
				INTO vCHILD_CONFIG_ROWID, vCHILD_DEST_PK 
				FROM RWW5.CONFIG_TBLCOLMAPPING 
				WHERE Src_Tabl_PK='N' AND Dest_Tabl_PK = 'Y' AND ((SRC_TABLENAME =  vTBLRID) 
				OR (SRC_TABLENAME LIKE '%,'|| vTBLRID) OR (SRC_TABLENAME LIKE vTBLRID ||',%') OR (SRC_TABLENAME LIKE '%,'|| vTBLRID ||',%'));
				
				--INSERT INTO RWW5.debugtext (VARNAME, VINT) VALUES  ( '722:SQLDIS ',SQLDIS);				
				--COMMENT#: SOURCE TABLE WHERE CLAUSE
				--SELECT SRC_CONDITION_VAL
				--INTO  vSRC_WHERE_Clause_WITH_VALUE
				--FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID = vTBLRID AND  ((SRC_CONDITION_COLNM <> '' AND SRC_CONDITION_COLNM IS NOT NULL) OR (SRC_CONDITION_VAL <> '' AND SRC_CONDITION_VAL IS NOT NULL));
				
				 /*-- COMMENT#: GET ID VALUE OF DESTINATION INSERT 
			    SET vQry = 'SET ? = (SELECT MAX('|| COALESCE(vDest_PK_ColName,'') ||') FROM ' || COALESCE(vDestSchmNm,'') || '.'|| COALESCE(vDestNm,'') ||')';
			    PREPARE S1 FROM vQry;				
				EXECUTE S1 INTO vDEST_ID;
				--#QUERYLOG_INSERT
				
				IF vDEST_ID IS NULL OR vDEST_ID = 0 THEN
					SET vDEST_ID = 1;
				END IF;
				
				IF pLOG_Execution IS NULL
				--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=vTBLRID AND LINENUM='579') = 0
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'707','')) <> 0)  
					THEN
		 			INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (vBatchNum,vTBLRID,'707','SPLOADCONFIG - VAR QUERY',vQry,SQLDIS);
		 			--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 			SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'707','');
		 			
		 		END IF;
			 	
				IF SQLDIS < 0 THEN
					SET vQry = vQry;
	 				SET vQryID = 0;
	 				SET vQryLineNum = 707;
	 				GOTO ERROR_LOG;
		 		END IF;
		 		*/
				--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS',SQLDIS);
				--INSERT INTO RWW5.debugtext (VARNAME,VTEXT) VALUES  ('vDestColNm',vDestColNm);
		    	
		 		INSERT INTO RWW5.LOG_Activity(BATCH,Activity_Description) VALUES (vBatchNum,'DATA LOAD: START - SOURCE TABLE NAME: '|| COALESCE(vSrcNm,'') || ' DESTINATION TABLE NAME: '|| COALESCE(vDestNm,''));
		 				
		    	/*************** GET PROCEDURE DATA INTO TEMP TABLE ********************************/
	     		-- #COMMENT: CALL THE SP FOR SELECT	   			
	     		--INSERT INTO RWW5.debugtext (VTEXT) VALUES  ( 'CALL SP LINE#630');
	     		
	     		CALL PWW5.PRC_DATA_LOAD_CREATE_SCRIPTS_WITHUPDATE(COALESCE(vTBLRID,''),COALESCE(vSrcSchmNm,'') ,COALESCE(vSrcNm,''),COALESCE(vSrcIDColNm,''),'','','','S',vParent_Table_Flag,'','','','','',vBatchNum,vTAB_Data_Decision,pRetVal,pRetRecCount,'','',pLOG_Execution
	     		,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,vQry_LineNum_LOGGED,vUPDATE_READSTATUS,'',DEFAULT,vSrc_Parent_Ref_Col_Nm,DEFAULT,DEFAULT,DEFAULT,vINSERT_RECORDCOUNT,vUPDATE_RECORDCOUNT);--,vErrMsg);
	     		
	     		--COMMENT#: IF THE SOURCE TABLE HAS NO RECORDS THEN GOT TO NEXT TABLE
	     		--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS:733',SQLDIS);
	     		IF pRetVal < 0  THEN
					--#ERRORLOG_INSERT:					
					GOTO Leave_Cursor_rsCur;							
				END IF;
				
				
				
	     		
	     		ASSOCIATE RESULT SET LOCATOR(result1) WITH PROCEDURE PWW5.PRC_DATA_LOAD_CREATE_SCRIPTS_WITHUPDATE ;
	     		
	     		ALLOCATE rsCur CURSOR FOR RESULT SET result1;
	     		
	     		--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS:744',SQLDIS);
	     		IF SQLDIS < 0 THEN
	     			SET vQry = 'ALLOCATE CURSOR ISSUE';
	 				SET vQryID = 0;
	 				SET vQryLineNum = 677;
					GOTO ROLLBACK_TO_SAVEPOINT_RSCrsr;
 					
 				END IF;
	     		
	     		FETCH FROM rsCur INTO vSrcID,vSrc_Parent_Ref_Col_Val;
	     		
	     		--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS:754',SQLDIS);
	     		--INSERT INTO RWW5.debugtext (VTEXT,VINT) VALUES  (vTAB_Data_Decision,vBatchSize);
	     		
	     		--COMMENT#: SET A DEFAULT VALUE for ONE TIME FEEDS IF THE BATCH SIZE IS NOT DEFINED
	     		IF (vBatchSize = 0 OR vBatchSize IS NULL) THEN
				    SET vBatchSize = 100;
				END IF;
			
				--INSERT INTO RWW5.debugtext (VTEXT,VINT) VALUES  (vTAB_Data_Decision,vBatchSize);
				--INSERT INTO RWW5.debugtext (VARNAME, VINT) VALUES  ( '800:SQLDIS ',SQLDIS);
				--COMMENT#: TO ROLLBACK IN CASE OF ANY ERRORS
				SAVEPOINT BEFORE_TABLE_INSERT ON ROLLBACK RETAIN CURSORS;
				
				--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS:766',SQLDIS);
				
				SET vSvePointDeclared = 'Y';
				
				--COMMENT#: WHEN A PLN_MEMBER DIV/CLSS/POL_NO IS CHANGED INSTEAD OF ADDING A NEW RECORD IN PLN_MEMBER, EXISTING RECORD PLNS_ID IS UPDATED. IDENTIFIED IN DEFECT#3789
				IF vDestNm = 'PLN_MEMBER' AND vTBLRID = '43' THEN
					--COMMENT#: ADDING THE MISSING FLAGS REMOVED
					-- THE FLAG WERE REMOVED BECAUSE, FOR IDENTIYING THE EXISTING CONDITION, WE NEED TO CONSIDER ONLY 3 COLUMNS
					SET vOrg_TDD_Src_CHAR_DATATYPE = vTDD_Src_CHAR_DATATYPE;
					SET vOrg_TDD_Dest_CHAR_DATATYPE = vTDD_Dest_CHAR_DATATYPE;
					SET vOrg_TDD_Dest_DOMINST = vTDD_Dest_DOMINST;
					SET vOrg_TDD_Dest_DOMID = vTDD_Dest_DOMID;
					
				END IF;
				
				WHILE (EOF1 = 0) DO
					BEGIN
						--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS:770',SQLDIS);
						/*IF vSrcID = 179442 THEN
							INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS:' || CAST(vSrcID AS VARCHAR(20)),SQLDIS);
						END IF;
						*/
						--COMMENT#: Table is part of Delta Feed and Condition needs to be checked whether or not data exists AND PERFORM INSERT/UPDATE ACCORDINGLY
			    		IF (vTAB_Data_Decision = 'Y' OR 
			    		--COMMENT#:  DUE TO BATCH WISE INSERT - TO SKIP ALREADY INSERTED RECORDS IN CASE OF ONE TIME FEED AND PREVIOUS IMPORT WAS NOT COMPLETED SUCCESSFULLY 
				    		(vTAB_Data_Decision = 'N' AND
				    		--COMMENT#: VALID CHECK CONDITIONS MUST BE DEFINED IN THE CONFIG
				    		(vTDD_DestChkTabNm IS NOT NULL OR vTDD_DestChkTabNm <> '') AND
				    		(
				    			(vPrev_ImportStatus = 'ERROR' OR vPrev_ImportStatus = '')
				    		OR
				    			(vDestNm = 'PLN_SPONSR_SALES_REPS' OR vDestNm = 'PLN_SPONSR_ADVRS')
				    		))
		    				)		    			
		    			THEN
		    				--INSERT INTO RWW5.debugtext (VTEXT) VALUES  ( 'IF SECOND PART CALLED LINE#681');
			    			--COMMENT#: SOURCE JOIN CONDITION
		    				SELECT SRC_CONDITION_VAL
							INTO  vSRC_WHERE_Clause_WITH_VALUE
							FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID = vTBLRID AND  ((SRC_CONDITION_COLNM <> '' AND SRC_CONDITION_COLNM IS NOT NULL) OR (SRC_CONDITION_VAL <> '' AND SRC_CONDITION_VAL IS NOT NULL));
			    			--COMMENT#: IF THE ABOVE QUERY DOESNOT FIND ANY RECORDS THEN IT WILL CHANGE THE SQL STATE TO '0200' AND SET THE VARIABLE TO 1 
							--DUE TO WHICH THE BELOW LOOP DOESNOT WORK 
							IF SQLDIS < 0 THEN
									SET vQry = 'WHERE CLAUSE VALUE FROM COLMAPPING TABLE ISSUE';
					 				SET vQryID = vSrcID;
					 				SET vQryLineNum = 733;
			 						GOTO ROLLBACK_TO_SAVEPOINT_RSCrsr;
			 					--END IF;
			 				END IF;
			 				
							IF EOF1 = 1 THEN
								SET EOF1 = 0;
							END IF;
							
							--COMMENT#: WHEN COLUMN NAME HAS FORMATTING TO BE DONE, AND ',' NEEDS TO BE SPECIFIED WHILE DEFINING THE COLUMN IN CONFIG TABLE '!' IS SPECIFIED
							SET vTDD_Where_Clause = REPLACE(vTDD_Where_Clause,'?','''');
							SET vND_Where_Clause = REPLACE(vND_Where_Clause,'?','''');
							SET vTDD_Where_Clause = REPLACE(vTDD_Where_Clause,'!',',');
							SET vND_Where_Clause = REPLACE(vND_Where_Clause,'!',',');
							
							--INSERT INTO RWW5.debugtext (VARNAME,VTEXT) VALUES  ('vTDD_Where_Clause',vTDD_Where_Clause);
							--INSERT INTO RWW5.debugtext (VARNAME,VTEXT) VALUES  ('vND_Where_Clause',vND_Where_Clause);
							
							--COMMENT#: WHEN DATA FOR SINGLE DESTINATION TABLE IS COMING FROM MULTIPLE SOURCE TABLE
						    IF vSRC_WHERE_Clause_WITH_VALUE LIKE '%JOIN%' THEN
						    	--COMMENT#: FETCH VALUE FOR THE CONDITION COLUMNS FROM SOURCE TABLE CURRENT RECORD
						    	IF vND_Where_Clause <> '' AND vND_Where_Clause IS NOT NULL THEN
						    		SET vQry = 'SET (?,?,?,?) = (SELECT DISTINCT '|| COALESCE(vTDD_Where_Clause,'') ||','|| COALESCE(vND_Where_Clause,'') ||',A.ROW_EFF_DT,A.ROW_EXP_DT FROM '|| COALESCE(vSrcSchmNm,'') ||'.'||COALESCE(vSrcNm,'')||' AS A '|| COALESCE(vSRC_WHERE_Clause_WITH_VALUE,'') ||' AND A.'||COALESCE(vSrcIDColNm,'') || ' = ('|| COALESCE(vSrcID,'') ||')) ';
						    	ELSE						
									SET vQry = 'SET (?,?,?,?) = (SELECT DISTINCT '|| COALESCE(vTDD_Where_Clause,'') || ','''',A.ROW_EFF_DT,A.ROW_EXP_DT FROM '|| COALESCE(vSrcSchmNm,'') ||'.'||COALESCE(vSrcNm,'')||' AS A '|| COALESCE(vSRC_WHERE_Clause_WITH_VALUE,'') ||' AND A.'||COALESCE(vSrcIDColNm,'') || ' = ('|| COALESCE(vSrcID,'') ||')) ';
								END IF;
						    ELSE
						    	--COMMENT#: FETCH VALUE FOR THE CONDITION COLUMNS FROM SOURCE TABLE CURRENT RECORD						
						    	IF vND_Where_Clause <> '' AND vND_Where_Clause IS NOT NULL THEN
						    		SET vQry = 'SET (?,?,?,?) = (SELECT '|| COALESCE(vTDD_Where_Clause,'') ||','|| COALESCE(vND_Where_Clause,'') ||',ROW_EFF_DT,ROW_EXP_DT FROM '|| COALESCE(vSrcSchmNm,'') ||'.'||COALESCE(vSrcNm,'')||' WHERE '||COALESCE(vSrcIDColNm,'') || ' = ('|| COALESCE(vSrcID,'') ||')) ';
						    	ELSE
									SET vQry = 'SET (?,?,?,?) = (SELECT '|| COALESCE(vTDD_Where_Clause,'') || ','''',ROW_EFF_DT,ROW_EXP_DT FROM '|| COALESCE(vSrcSchmNm,'') ||'.'||COALESCE(vSrcNm,'')||' WHERE '||COALESCE(vSrcIDColNm,'') || ' = ('|| COALESCE(vSrcID,'') ||')) ';
								END IF;
						    END IF;
			    			
			    			PREPARE S1 FROM vQry;				
							EXECUTE S1 INTO vTDD_Where_Clause_withVal,vND_Where_Clause_withVal,vSRC_ROW_EFF_DT,vSRC_ROW_EXP_DT;
							
							IF pLOG_Execution IS NULL 
							--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
							--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=vBatchNum  AND TBL_ROWID=vTBLRID AND LINENUM='776') = 0
							 AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'776','')) <> 0) 
							THEN
			 					INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (vBatchNum,vTBLRID,'776','SPLOADCONFIG - VAR QUERY',vQry,SQLDIS);
			 					--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
			 					SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'776','');
			 					--COMMIT;
			 				END IF;
			 				--END;
			 				IF SQLDIS < 0 THEN
			 					SET vQry = vQry;
				 				SET vQryID = vSrcID;
				 				SET vQryLineNum = 776;
		 						GOTO ROLLBACK_TO_SAVEPOINT_RSCrsr;
			 				END IF;
							
							IF (vTDD_FromJOINCond <> '' OR vTDD_FromJOINCond IS NOT NULL) THEN
								--COMMENT#: GET COUNTS OF RECORDS OF DESTINATION TABLE TO IDENTIFY WHETHER OR NOT RECORD EXITS
								SET vQry = 'SET ? = (SELECT COUNT(*) FROM '|| COALESCE(vTDD_DestChkTabNm,'') ||' AS A '|| COALESCE(vTDD_FromJOINCond,'') ||' WHERE '|| COALESCE(vTDD_Where_Clause_withVal,'') || ')';
							ELSE
								--COMMENT#: GET COUNTS OF RECORDS OF DESTINATION TABLE TO IDENTIFY WHETHER OR NOT RECORD EXITS
								SET vQry = 'SET ? = (SELECT COUNT(*) FROM '|| COALESCE(vTDD_DestChkTabNm,'') ||' WHERE '|| COALESCE(vTDD_Where_Clause_withVal,'') || ')';
							END IF;
							
							PREPARE S1 FROM vQry;				
							EXECUTE S1 INTO vTDD_Cnt;
							
							--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('vTDD_Cnt',vTDD_Cnt);
							--INSERT INTO RWW5.debugtext (VARNAME,VTEXT) VALUES  ('vQry',vQry);
							
							IF pLOG_Execution IS NULL 
							--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
							--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=vBatchNum  AND TBL_ROWID=vTBLRID AND LINENUM='807') = 0 
							AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'807','')) <> 0)
							THEN
			 					INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (vBatchNum,vTBLRID,'807','SPLOADCONFIG - VAR QUERY',vQry,SQLDIS);
			 					--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
			 					SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'807','');
			 					--COMMIT;
			 				END IF;	
			 				
							IF SQLDIS < 0 THEN
								SET vQry = vQry;
				 				SET vQryID = vSrcID;
				 				SET vQryLineNum = 807;
								--CLOSE rsCur;
			 					GOTO ROLLBACK_TO_SAVEPOINT_RSCrsr;
			 				END IF;
			 				
							--COMMENT# RECORD EXISTS, SO DO AN -------UPDATE
							IF vTDD_Cnt > 0
							-- COMMENT#: THE CONDITION IS TO BLOCK UPDATES IN CASE OF FUTURE DATED UPDATES, WHICH MIGHT BE PULLED DUE TO FUTURE DATE POLICY DATA 
							AND (CURRENT DATE BETWEEN vSRC_ROW_EFF_DT AND vSRC_ROW_EXP_DT)
							-- COMMENT#: ONLY DO AN UPDATE IN CASE OF DAILY FEED AND NOT IN CASE OF ONE TIME FEED  
							AND vTAB_Data_Decision = 'Y' THEN
								
								--COMMENT#: FETCH VALUE FOR THE CONDITION COLUMNS FROM SOURCE TABLE CURRENT RECORD
								-- FETCH THE ID VALUE FROM THE DESTINATION TABLE SO THAT SAME CAN BE USED AS A WHERE CLAUSE WHILE UPDATING THE FINAL DESTINATION
								-- EXAMPLE: WHEN WE ARE IMPORTING HIST_PLN_MEMBER TO CONTACTS THEN WE CHECK IN DESTINATION TABLE PLN_MEMBER
								-- IF THE VALUE EXISTS IN PLN_MEMBER, THEN FETCH THE CNTC_CD (CONTACTS ID COLUMN IN PLN_MEMBER) FOR THAT RECORD
								-- SO THAT WHILE UPDATING CONTACTS THAT ID COULD BE REFERRED
								
								IF (vTDD_FromJOINCond <> '' OR vTDD_FromJOINCond IS NOT NULL) THEN
								SET vQry = 'SET ? = (SELECT '|| COALESCE(vTDD_Dest_Col_ID,'') || ' FROM '|| COALESCE(vTDD_DestChkTabNm,'') ||' AS A '|| COALESCE(vTDD_FromJOINCond,'') ||' WHERE '|| COALESCE(vTDD_Where_Clause_withVal,'') || ')';
								ELSE
									SET vQry = 'SET ? = (SELECT '|| COALESCE(vTDD_Dest_Col_ID,'') ||' FROM '|| COALESCE(vTDD_DestChkTabNm,'') ||' WHERE '|| COALESCE(vTDD_Where_Clause_withVal,'') ||') '; 
								END IF; 
								
								PREPARE S1 FROM vQry;				
								EXECUTE S1 INTO vTDD_Dest_Col_ID_withVal;
								
								
								IF pLOG_Execution IS NULL 
								--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
								--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=vBatchNum  AND TBL_ROWID=vTBLRID AND LINENUM='862') = 0
								AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'862','')) <> 0) 
								THEN
			 						INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (vBatchNum,vTBLRID,'862','SPLOADCONFIG - VAR QUERY',vQry,SQLDIS);
			 						--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
			 						SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'862','');
			 						--COMMIT;
			 					END IF;
			 					--END;
			 					IF SQLDIS < 0 THEN
			 						SET vQry = vQry;
					 				SET vQryID = vSrcID;
					 				SET vQryLineNum = 862;
			 						--CLOSE rsCur;
			 						GOTO ROLLBACK_TO_SAVEPOINT_RSCrsr;
			 					END IF;	
			 					
			 					IF vCreated_by IS NOT NULL AND vCreated_by <>'' THEN
			 						SET vSrcColNm = replace(vSrcColNm,',COALESCE(CREATE_BY,0),', ',');
		    						SET vDestColNm = replace(vDestColNm,'CREATE_BY,',' ');
		    						SET vSrcColNm = replace(vSrcColNm,'MODIFY_BY,0', vCreated_by||',NULL'); 						
								END IF;
								
														
								CALL PWW5.PRC_DATA_LOAD_CREATE_SCRIPTS_WITHUPDATE(COALESCE(vTBLRID,''),COALESCE(vSrcSchmNm,'') ,COALESCE(vSrcNm,''),COALESCE(vSrcIDColNm,''),COALESCE(vSrcID,0)
								,COALESCE(vDestSchmNm,''),COALESCE(vDestNm,''),'U',
								vParent_Table_Flag,vSrcColNm,vDestColNm,vSrcColNm_DomInst_COLNM,vSrcColNm_DomInst_forSELECT,vTDD_Dest_Col_ID_withVal,vBatchNum,vTAB_Data_Decision,pRetVal,pRetRecCount,'','',pLOG_Execution
								,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,vQry_LineNum_LOGGED,vUPDATE_READSTATUS,vUPDATE_TABLE_READSTATUS,vDest_PK_ColName,vSrc_Parent_Ref_Col_Nm,vCHILD_CONFIG_ROWID, vCHILD_DEST_PK,vSrc_Parent_Ref_Col_Val,vINSERT_RECORDCOUNT,vUPDATE_RECORDCOUNT);--,vErrMsg);
								
							--COMMENT# RECORD DOESN'T EXISTS, SO DO AN -------INSERT
							ELSEIF (vTDD_Cnt = 0) 	THEN	
							
								--COMMENT#: TO SET THE DEFAUL FOR CREATEBY DURIN INSERTS				
								IF vCreated_by IS NOT NULL AND vCreated_by <>'' THEN
									SET vSrcColNm = replace(vSrcColNm,'CREATE_BY,0', vCreated_by||',NULL'); 
									SET	vSrcColNm = replace(vSrcColNm,'MODIFY_BY,0', 'MODIFY_BY,NULL');
								END IF;
								
								--COMMENT#: WHEN A PLN_MEMBER DIV/CLSS/POL_NO IS CHANGED INSTEAD OF ADDING A NEW RECORD IN PLN_MEMBER, EXISTING RECORD PLNS_ID IS UPDATED. IDENTIFIED IN DEFECT#3789
								IF vDestNm = 'PLN_MEMBER' AND vTBLRID = '43' THEN
									--COMMENT#: ADDING THE MISSING FLAGS REMOVED
									-- THE FLAG WERE REMOVED BECAUSE, FOR IDENTIYING THE EXISTING CONDITION, WE NEED TO CONSIDER ONLY 3 COLUMNS
									SET vTDD_Src_CHAR_DATATYPE = vTDD_Src_CHAR_DATATYPE || ',Y,Y';
									SET vTDD_Dest_CHAR_DATATYPE = vTDD_Dest_CHAR_DATATYPE || ',Y,Y';
									SET vTDD_Dest_DOMINST = vTDD_Dest_DOMINST || ',N,N';
									SET vTDD_Dest_DOMID = vTDD_Dest_DOMID || ',0,0';
								END IF;
								
								-- COMMENT#: NEW DATA JOIN CONDITION HAS 2 OR MORE JOIN REFERENCES
								IF LOCATE('||',vOrginal_ND_SrcDest_ColmNm) > 0 THEN
									
									IF vND_Where_Clause_withVal='' THEN
										SET vND_Where_Clause_withVal= ' ';
									END IF;
									IF vND_FromJOINCond='' THEN
										SET vND_FromJOINCond = ' ';
									END IF;
									
									--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'vOrginal_ND_SrcDest_ColmNm ',vOrginal_ND_SrcDest_ColmNm);
										--COMMENT#: TO SET THE DEFAUL FOR CREATEBY DURIN INSERTS
									--SET vSrcColNm = replace(vSrcColNm,',COALESCE(CREATE_BY,0),', ',');
		    						--SET vDestColNm = replace(vDestColNm,'CREATE_BY,',' ');
		    						--SET vSrcColNm = replace(vSrcColNm,'MODIFY_BY,0', vCreated_by||',NULL'); 
									
									
									CALL PWW5.PRC_DATA_LOAD_CREATE_SCRIPTS_WITHUPDATE(COALESCE(vTBLRID,''),COALESCE(vSrcSchmNm,'') ,COALESCE(vSrcNm,''),COALESCE(vSrcIDColNm,''),COALESCE(vSrcID,0),COALESCE(vDestSchmNm,''),COALESCE(vDestNm,''),'I',vParent_Table_Flag,vSrcColNm,vDestColNm,vSrcColNm_DomInst_COLNM,vSrcColNm_DomInst_forSELECT,'',vBatchNum,vTAB_Data_Decision,pRetVal,pRetRecCount,vND_Where_Clause_withVal,vND_FromJOINCond,pLOG_Execution
									,vTDD_SrcColumnNm,vTDD_DestChkTabNm,vTDD_DestColumnNm,vTDD_Src_CHAR_DATATYPE,vTDD_Dest_CHAR_DATATYPE,vTDD_Dest_DOMINST,vTDD_Dest_DOMID,vOrginal_ND_SrcDest_ColmNm,vND_FromJOINCond,vDestSchmNm,vND_ParentTablRef,vQry_LineNum_LOGGED,vUPDATE_READSTATUS,vUPDATE_TABLE_READSTATUS,vDest_PK_ColName,vSrc_Parent_Ref_Col_Nm,vCHILD_CONFIG_ROWID, vCHILD_DEST_PK,vSrc_Parent_Ref_Col_Val,vINSERT_RECORDCOUNT,vUPDATE_RECORDCOUNT);--,vErrMsg);
								ELSE
									--COMMENT#: TO SET THE DEFAUL FOR CREATEBY DURIN INSERTS
									--SET vSrcColNm = replace(vSrcColNm,'CREATE_BY,0', vCreated_by||',NULL'); 
									--SET	vSrcColNm = replace(vSrcColNm,'MODIFY_BY,0', 'MODIFY_BY,NULL');
									
									--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS:972',SQLDIS);
									
									CALL PWW5.PRC_DATA_LOAD_CREATE_SCRIPTS_WITHUPDATE(COALESCE(vTBLRID,''),COALESCE(vSrcSchmNm,'') ,COALESCE(vSrcNm,''),COALESCE(vSrcIDColNm,''),COALESCE(vSrcID,0),COALESCE(vDestSchmNm,''),COALESCE(vDestNm,''),'I',vParent_Table_Flag,vSrcColNm,vDestColNm,vSrcColNm_DomInst_COLNM,vSrcColNm_DomInst_forSELECT,'',vBatchNum,vTAB_Data_Decision,pRetVal,pRetRecCount,vND_Where_Clause_withVal,vND_FromJOINCond,pLOG_Execution
									,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,vQry_LineNum_LOGGED,vUPDATE_READSTATUS,vUPDATE_TABLE_READSTATUS,vDest_PK_ColName,vSrc_Parent_Ref_Col_Nm,vCHILD_CONFIG_ROWID, vCHILD_DEST_PK,vSrc_Parent_Ref_Col_Val,vINSERT_RECORDCOUNT,vUPDATE_RECORDCOUNT);--,vErrMsg);	
								END IF;
								
								--COMMENT#: WHEN A PLN_MEMBER DIV/CLSS/POL_NO IS CHANGED INSTEAD OF ADDING A NEW RECORD IN PLN_MEMBER, EXISTING RECORD PLNS_ID IS UPDATED. IDENTIFIED IN DEFECT#3789
								IF vDestNm = 'PLN_MEMBER' AND vTBLRID = '43' THEN
									--COMMENT#: REVERTING BACK THE VALUES TO ORIGINAL VALUE FOR SUBSEQUENT RECORDS									
									SET vTDD_Src_CHAR_DATATYPE = vOrg_TDD_Src_CHAR_DATATYPE;
									SET vTDD_Dest_CHAR_DATATYPE = vOrg_TDD_Dest_CHAR_DATATYPE;
									SET vTDD_Dest_DOMINST = vOrg_TDD_Dest_DOMINST;
									SET vTDD_Dest_DOMID = vOrg_TDD_Dest_DOMID;
									
								END IF;
								
							END IF;
						--COMMENT# NOT A DELTA SOURCE TABLE
						ELSE
							--COMMENT#: ONE TIME SOURCE TABLE SO PERFORM ONLY INSERT
							--********************************************************************************************/
							--INSERT INTO RWW5.debugtext (VTEXT) VALUES  ( 'ELSE PART CALLED LINE#842');
							IF vCreated_by IS NOT NULL AND vCreated_by <>'' THEN
								SET vSrcColNm = replace(vSrcColNm,'CREATE_BY,0', vCreated_by||',NULL'); 
								SET	vSrcColNm = replace(vSrcColNm,'MODIFY_BY,0', 'MODIFY_BY,NULL');
							END IF;
							
							--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS:986',SQLDIS);
							
							CALL PWW5.PRC_DATA_LOAD_CREATE_SCRIPTS_WITHUPDATE(COALESCE(vTBLRID,''),COALESCE(vSrcSchmNm,'') ,COALESCE(vSrcNm,''),COALESCE(vSrcIDColNm,''),COALESCE(vSrcID,0),COALESCE(vDestSchmNm,''),COALESCE(vDestNm,''),'I',vParent_Table_Flag,vSrcColNm,vDestColNm,vSrcColNm_DomInst_COLNM,vSrcColNm_DomInst_forSELECT,'',vBatchNum,vTAB_Data_Decision,pRetVal,pRetRecCount,'','',pLOG_Execution
							,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,DEFAULT,vQry_LineNum_LOGGED,vUPDATE_READSTATUS,vUPDATE_TABLE_READSTATUS,vDest_PK_ColName,vSrc_Parent_Ref_Col_Nm,vCHILD_CONFIG_ROWID, vCHILD_DEST_PK,vSrc_Parent_Ref_Col_Val,vINSERT_RECORDCOUNT,vUPDATE_RECORDCOUNT);
			    	
						END IF;
						
						--COMMENT#:ERROR OR DUPLICATES FOUND IN SOURCE
						IF pRetVal < 0 OR pRetVal = 1000001 THEN
							--#ERRORLOG_INSERT:
							INSERT INTO RWW5.LOG_ERROR(BATCH,TBL_ROWID,Error_description,Error_Msg,Error_Code) VALUES (vBatchNum,vTBLRID,'ERROR - SPLOADCONFIG: DATA ROLLED BACK- SRCNAME:'|| vSrcNm ||' - DESTNAME:'|| vDestNm || ' - SRC_RID:'|| CAST(vSrcID AS VARCHAR(50)),vErrMsg,pRetVal);
							--INSERT INTO RWW5.debugtext (VARNAME,VTEXT) VALUES  ( 'ERROR: DATA ROLLED BACK - DEST TABLE NAME:'|| vDestNm ||' & ERROR CODE: ' || CAST(pRetVal AS VARCHAR(25)));
							CLOSE rsCur;
							GOTO Leave_Cursor_rsCur;
							
						END IF;
							
						FETCHNEXT:
						
						--#DEBUG_STEP:
						--INSERT INTO RWW5.debugtext (VARNAME,VTEXT,VINT) VALUES  ( 'ACTION CALLED FOR ROWID & CERTNO: '||CAST(vSrcID AS VARCHAR(25)),CASE WHEN vTDD_Cnt > 0 THEN 'U' ELSE 'I' END,pRetVal);
						
						SET vPARSED_RECORDCOUNT = vPARSED_RECORDCOUNT + 1;
						
				    	--COMMENT#: DAILY FEED - UPDATE SOURCE HIST TABLES THE RECORD READ STATUS TO READ - R
				    	IF vTAB_Data_Decision = 'Y' AND vUPDATE_READSTATUS = 'R' THEN
				    		SET vQry = 'UPDATE '|| COALESCE(vSrcSchmNm,'') ||'.'||COALESCE(vSrcNm,'')||' SET READSTATUS = '''|| COALESCE(vUPDATE_READSTATUS,'') ||''' WHERE '||COALESCE(vSrcIDColNm,'') || ' = ('|| COALESCE(vSrcID,'') ||') ';
							PREPARE S1 FROM vQry;				
							EXECUTE S1; 
							
							IF pLOG_Execution IS NULL 
							--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
							AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'811','')) <> 0) 
							THEN
		 						INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (vBatchNum,vTBLRID,'811','SPLOADCONFIG - VAR QUERY',vQry,SQLDIS);
		 						--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 						SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'811','');
				 					
				 			END IF;
		 					--END;
		 					IF SQLDIS < 0 THEN
		 						SET vQry = vQry;
				 				SET vQryID = vSrcID;
				 				SET vQryLineNum = 811;
		 						--CLOSE rsCur;
		 						GOTO ROLLBACK_TO_SAVEPOINT_RSCrsr;
		 					END IF;
				    	END IF;
				    	
				    					    	
				    	--COMMENT#: ON THE BASIS OF BATCH SIZE THE NUMBER OF RECORDS ARE COMMITTED
				    	IF (vBatchSize > 0 AND vRecordCount = vBatchSize) THEN
				    				    		
				    		--RETURN rsCur;
				    		--RELEASE(COMMIT);
				    		
				    		UPDATE RWW5.CONFIG_TBLMAPPING
				    		SET PARSED_RECORDCOUNT = vPARSED_RECORDCOUNT
				    		,UPDATE_RECORDCOUNT = vUPDATE_RECORDCOUNT
				    		,INSERT_RECORDCOUNT = vINSERT_RECORDCOUNT
				    		,LASTUSED_DT = CURRENT TIMESTAMP
				    		WHERE TBL_ROWID = vTBLRID;--DEST_TABLESCHEMA = vDestSchmNm AND DEST_TABLENAME = vDestNm;
				    		
				    		RELEASE SAVEPOINT BEFORE_TABLE_INSERT;
				    		COMMIT WORK;
				    		--INSERT INTO RWW5.debugtext (VARNAME,VTEXT,VINT) VALUES  ('COMMIT @: ' || CAST(vRecordCount AS VARCHAR(20)),vTBLRID,vSrcID);
				    		SET vRecordCount = 1;
				    		--RELEASE SAVEPOINT BEFORE_TABLE_INSERT;
				    		SAVEPOINT BEFORE_TABLE_INSERT ON ROLLBACK RETAIN CURSORS;
				    		
				    	ELSE 
				    		--COMMENT#: COUNTER TO COUNR THE NUMBER OF RECORDS PARSED BY THE CURSOR
				    		SET vRecordCount = vRecordCount + 1;
				    		
				    	END IF;
				    	
				    	--COMMENT#: INCREAMENTING ID VALUE FOR THE DESTINATION TABLE
				    	--SET vDEST_ID = vDEST_ID + 1;
				    	
				    	--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS:1060',SQLDIS);
				    	
				    	FETCH FROM rsCur INTO vSrcID,vSrc_Parent_Ref_Col_Val;
				    	--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('SQLDIS: 5 ' || CAST(vSrcID AS VARCHAR(20)),SQLDIS);
						SET vSRC_WHERE_Clause_WITH_VALUE = '';
					END;
				END WHILE;
				CLOSE rsCur;
				ROLLBACK_TO_SAVEPOINT_RSCrsr:
				--COMMENT#: IF WILL BE EXECUTED WHEN THERE IS AN ERROR IN INNER RS CURSOR BEFORE SP CALL
				IF (SQLDIS < 0 OR (vParent_Table_Flag IS NULL OR vParent_Table_Flag = '')) THEN
					
					IF vSvePointDeclared = 'Y' THEN
						ROLLBACK TO SAVEPOINT BEFORE_TABLE_INSERT;
					END IF;
					IF (vParent_Table_Flag IS NULL OR vParent_Table_Flag = '') THEN
						INSERT INTO RWW5.LOG_ERROR(BATCH,TBL_ROWID,Error_description,Error_Msg,Error_Code,QRYID,QRY,QRYLINENUM) VALUES (vBatchNum,vTBLRID,'ERROR - SPLOADCONFIG - RID - ' || CAST(vSrcID AS VARCHAR(50)),'VAR NAME: vParent_Table_Flag cannot be BLANK..!!!!',SQLDIS,vQryID,vQry,vQryLineNum);
					ELSE
						INSERT INTO RWW5.LOG_ERROR(BATCH,TBL_ROWID,Error_description,Error_Msg,Error_Code,QRYID,QRY,QRYLINENUM) VALUES (vBatchNum,vTBLRID,'ERROR - SPLOADCONFIG - RID - ' || CAST(vSrcID AS VARCHAR(50)),vErrMsg,SQLDIS,vQryID,vQry,vQryLineNum); 
					END IF;
					
					UPDATE RWW5.CONFIG_TBLMAPPING SET LASTUSED_DT = CURRENT TIMESTAMP, ACTIVE_ROW='N',ImportStatus='ERROR'
					,PARSED_RECORDCOUNT = vPARSED_RECORDCOUNT,UPDATE_RECORDCOUNT = vUPDATE_RECORDCOUNT,INSERT_RECORDCOUNT = vINSERT_RECORDCOUNT 
					WHERE TBL_ROWID = vTBLRID;
					
					CLOSE rsCur;
					SET vINSERT_ERRORLOG = 'Y';
					SET SQLDIS = 0;
					 
					GOTO DESTTBL_ACTIVITY_END;
					
				END IF;
			END; -- # COURSOR COMMENT CHANGES -END STATEMENT FOR THE BEGIN INSIDE WHILE LOOP;	
			
			--COMMENT#: UPDATE_RECORDCOUNTS:
			UPDATE RWW5.CONFIG_TBLMAPPING SET LASTUSED_DT = CURRENT TIMESTAMP, ACTIVE_ROW='N',ImportStatus='SUCCESS'
			,PARSED_RECORDCOUNT = vPARSED_RECORDCOUNT,UPDATE_RECORDCOUNT = vUPDATE_RECORDCOUNT,INSERT_RECORDCOUNT = vINSERT_RECORDCOUNT 
			WHERE TBL_ROWID = vTBLRID;
			
			Leave_Cursor_rsCur:
			IF vSvePointDeclared = 'Y' THEN
				RELEASE SAVEPOINT BEFORE_TABLE_INSERT;
			END IF;
			COMMIT WORK;
			
			DESTTBL_ACTIVITY_END:
			--#ACTIVITY_INSERT
		 	INSERT INTO RWW5.LOG_Activity(BATCH,Activity_Description) VALUES (vBatchNum,'DATA LOAD: END - SOURCE TABLE NAME: '|| COALESCE(vSrcNm,'') || ' DESTINATION TABLE NAME: '|| COALESCE(vDestNm,''));
											
			/*SET vTDD_FromJOINCond = '';
			SET vTDD_Where_Clause = '';
			SET vTDD_Where_Clause_withVal = '';
			SET vND_Where_Clause = '';
			SET vSrc_Parent_Ref_Col_Nm ='';
			
			
		 	SET vTBLRID = '';
		 	SET vSrcSchmNm = '';
		 	SET vSrcNm = '';
		 	SET vSrcIDColNm = '';
		 	SET vDestSchmNm = '';
		 	SET vDestNm = '';
		 	SET vPartTblNm = '';
		 	SET vTAB_Data_Decision = '';
		 	SET vTDD_DestChkTabNm = '';
		 	SET vTDD_SrcColumnNm = '';
		 	SET vTDD_Src_CHAR_DATATYPE = '';
		 	SET vTDD_DestColumnNm = '';
		 	SET vTDD_Dest_CHAR_DATATYPE = '';
		 	SET vTDD_Dest_DOMINST = '';
		 	SET vTDD_Dest_DOMID = '';
		 	SET vTDD_DestIDColNm = '';
		 	SET vTDD_FromJOINCond = '';
		 	SET vND_SrcDest_ColmNm = '';
		 	SET vND_FromJOINCond = '';
		 	SET vND_ParentTablRef = '';
		 	SET vBatchSize = 0;
		 	SET vPrev_ImportStatus = '';
			*/
				
	     	--COURSOR COMMENT CHANGES
	     FETCH ConfigTable_Cursor INTO vTBLRID,vSrcSchmNm,vSrcNm,vSrcIDColNm,vDestSchmNm,vDestNm,vPartTblNm,vTAB_Data_Decision,vTDD_DestChkTabNm,
	    vTDD_SrcColumnNm,vTDD_Src_CHAR_DATATYPE,vTDD_DestColumnNm,vTDD_Dest_CHAR_DATATYPE,vTDD_Dest_DOMINST,vTDD_Dest_DOMID,vTDD_DestIDColNm,vTDD_FromJOINCond
	    ,vND_SrcDest_ColmNm,vND_FromJOINCond,vND_ParentTablRef,vBatchSize,vPrev_ImportStatus; 
	    	
	    	
	    	--COMMENT#: LOOP TILL vRecord = 'L' - last record comes	    	
	    END WHILE;
	   -- COURSOR COMMENT CHANGESFETCH - 	
	 	--
	 	SET vConfigTblCrsr_Open = 'N';
	 	CLOSE ConfigTable_Cursor;
	 	
ACTIVITY_END:	 	
	 	--#ACTIVITY_INSERT
		INSERT INTO RWW5.LOG_Activity(BATCH,Activity_Description) VALUES (vBatchNum,'DATA LOAD: END');
		
ERROR_LOG:	
		--/*******************************
		IF (SQLDIS < 0 AND vINSERT_ERRORLOG = 'N') THEN
			INSERT INTO RWW5.LOG_ERROR(BATCH,TBL_ROWID,Error_description,Error_Msg,Error_Code,QRYID,QRY,QRYLINENUM) VALUES (vBatchNum,vTBLRID,'ERROR - SPLOADCONFIG - RID - ' || CAST(vSrcID AS VARCHAR(50)),vErrMsg,SQLDIS,vQryID,vQry,vQryLineNum);
			
			
		 	--COMMENT#: CLOSE if any of the cursors are open
		 	--/****# COURSOR COMMENT CHANGESFETCH - 
		 	IF vConfigTblCrsr_Open = 'Y' THEN
		 		CLOSE ConfigTable_Cursor;
		 	END IF;  --***/
		 	
		END IF;
	--*********************************/
	 	OPEN vReturnStatus;
	 	RETURN;				   
	END;	
END P1~
