CREATE OR REPLACE PROCEDURE PWW5.PRC_DATA_LOAD_CREATE_SCRIPTS_WITHUPDATE (IN pTBL_RID VARCHAR(25)
,IN pSrcSchNm VARCHAR(500) 
,IN pSrcTabNm VARCHAR(500) 
,IN pSrcTabIDCol VARCHAR(500) 
,IN pSrcTblRIDValue VARCHAR(500) 
,IN pDestSchNm VARCHAR(500) 
,IN pDestTabNm VARCHAR(500) 
,IN pReturnType VARCHAR(1)
,IN pParent_Table_Flag VARCHAR(2)
,IN pSrcColNm CLOB(1451375),IN pDestColNm CLOB(1451375) 
,IN pSrcColNm_DomInst_COLNM CLOB(1451375),IN pSrcColNm_DomInst_forSELECT CLOB(1451375)
,IN pDestUpdateWhereClause CLOB(1451375) DEFAULT NULL
,IN pBatchNum BIGINT
,IN pTabDecision VARCHAR(1)
,OUT vReturnStatus BIGINT
,OUT vROWSFETCHED BIGINT
,IN pND_WhereClause_ChildInsert CLOB(1451375)
,IN pND_FromJoinCond_ChildInsert CLOB(1451375)
,IN pLOG_Execution VARCHAR(1)
,IN pTDD_SrcColumnNm CLOB(15451375)  DEFAULT NULL
,IN pTDD_DestChkTabNm CLOB(15451375) DEFAULT NULL
,IN pTDD_DestColumnNm CLOB(15451375) DEFAULT NULL
,IN pTDD_Src_CHAR_DATATYPE  CLOB(15451375) DEFAULT NULL
,IN pTDD_Dest_CHAR_DATATYPE  CLOB(15451375) DEFAULT NULL
,IN pTDD_Dest_DOMINST  CLOB(15451375) DEFAULT NULL
,IN pTDD_Dest_DOMID  CLOB(15451375) DEFAULT NULL
,IN pND_SrcDest_ColmNm CLOB(15451375) DEFAULT NULL
,IN pND_FromJOINCond CLOB(15451375) DEFAULT NULL
,IN pDestSchmNm VARCHAR(75) DEFAULT NULL
,IN pND_ParentTablRef VARCHAR(3200) DEFAULT NULL
,INOUT vQry_LineNum_LOGGED VARCHAR(3200)
,OUT vUPDATE_READSTATUS VARCHAR(2)
,IN pUPDATE_TABLE_READSTATUS VARCHAR(1)
,IN pDest_PK_ColName varchar(150) DEFAULT NULL
,IN pSrc_Parent_Ref_Col_Nm CLOB(15451375) DEFAULT NULL
,IN pCHILD_CONFIG_ROWID CLOB(15451375) DEFAULT NULL
,IN pCHILD_DEST_PK CLOB(15451375) DEFAULT NULL
,IN pSrc_Parent_Ref_Col_Val CLOB(15451375) DEFAULT NULL
,INOUT pINSERT_RECORDCOUNT BIGINT
,INOUT pUPDATE_RECORDCOUNT BIGINT
--,IN pDEST_ID BIGINT DEFAULT NULL
)

	DYNAMIC RESULT SETS 1
	LANGUAGE SQL
	MODIFIES SQL DATA
	COMMIT ON RETURN NO
	
P1: BEGIN
	
	
	DECLARE vSrcTab_PK CLOB(1451375);
	
	DECLARE vQry CLOB(1545137500);
	DECLARE vSrc_Chld_Where_CLAUSE CLOB(15451375);
	DECLARE vDest_PK_ID CLOB(15451375);
	
	DECLARE EOF1 SMALLINT DEFAULT 0 ;
	
	DECLARE vParent_Identity_Value BIGINT DEFAULT 0;
	--DECLARE vDest_PK_ColName varchar(150);
	DECLARE vSrc_Parent_Ref_Col_Nm CLOB(15451375);
	DECLARE vSrc_Parent_Ref_Col_Val VARCHAR(32000);
	
	DECLARE vParent_Identity_Key CLOB(15451375) DEFAULT '';
	DECLARE vParent_Identity_Key_Single_Col CLOB(15451375) DEFAULT '';
	DECLARE vParent_ROWID VARCHAR(25) DEFAULT '';
	DECLARE vParent_Identity_Key_col_nm CLOB(15451375);
	DECLARE vND_WhereClause_ChildInsert_Colnm CLOB(1451375); 
	
	DECLARE vSRC_WHERE_Clause_WITH_VALUE CLOB(154513750) DEFAULT '';
	
	DECLARE vLoopCnt BIGINT DEFAULT 0;
	DECLARE vErrMsg VARCHAR(32000);
	
	DECLARE SQLCODE INTEGER DEFAULT 0;
	DECLARE SQLDIS INTEGER DEFAULT 0;
	DECLARE vQryID INTEGER DEFAULT 0;
	DECLARE vQryLineNum INTEGER DEFAULT 0;
	DECLARE vLen INTEGER DEFAULT 0;
	DECLARE vNum_Rows BIGINT;
	DECLARE vREAD_STATUS_FILTER VARCHAR(3200) DEFAULT '';
	DECLARE vDEST_ID VARCHAR(32000) DEFAULT '';
	DECLARE vCHILD_PK_COLNM_COMMA VARCHAR(32000) DEFAULT '';
	DECLARE vCHILD_CONFIG_ROWID VARCHAR(32000) DEFAULT '';
	DECLARE vCHILD_PK_COLNM VARCHAR(32000) DEFAULT '';
	--DECLARE vDEST_ID BIGINT DEFAULT 0;
	DECLARE vPLNS_ID_COLNM VARCHAR(32000) DEFAULT '';
	DECLARE vPLNS_ID VARCHAR(32000) DEFAULT '';
	
	
	
	
	BEGIN	
		--Declare cursor: for Select Cursor
		DECLARE CrSr_Config_Data_LoadScript INSENSITIVE CURSOR WITH HOLD WITH RETURN FOR S1;
	 		
		-- COMMENT#: IDENTIFY THE PARENT TABLES ASSOCIATED AND SOURCE PK COLUMN VALUES	
		DECLARE CrSr_Config_IDENTITY_value CURSOR FOR 
			SELECT PARENT_TABLE_LIST.TBL_ROWID--,COLMAP.SRC_CHILD_TABL_COLNM_PK
			,'''''''' || SUBSTR(CAST(LISTAGG(''' || COALESCE('|| COALESCE(SRC_CHILD_TABL_COLNM_PK,'') || ','''') ||'''''',''''','')within group (order by COL_ROWID) as CLOB(451375)) ,
							1,LENGTH(CAST(LISTAGG(''' || COALESCE('|| COALESCE(SRC_CHILD_TABL_COLNM_PK,'') || ','''') ||'''''',''''','')within group (order by COL_ROWID) as CLOB(1451375)))-5)|| ''''''''  
			FROM RWW5.CONFIG_TBLCOLMAPPING COLMAP,
			(SELECT TBL_ROWID FROM RWW5.CONFIG_TBLMAPPING WHERE DEST_TABLESCHEMA ||'.'|| DEST_TABLENAME IN
			(SELECT COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT((SELECT DEST_PARENT_SCHM_TBLENM FROM RWW5.CONFIG_TBLMAPPING WHERE TBL_ROWID = pTBL_RID),',')))
			AND TAB_DATA_DECISION = pTabDecision) AS PARENT_TABLE_LIST
			WHERE COLMAP.TBL_COL_ROWID = pTBL_RID AND COLMAP.SRC_TABLENAME  LIKE '%' ||PARENT_TABLE_LIST.TBL_ROWID|| '%' 
			AND (COLMAP.SRC_CHILD_TABL_COLNM_PK IS NOT NULL AND COLMAP.SRC_CHILD_TABL_COLNM_PK <> '')
			--#COMMENT: Removed the below condition to consider the columns which are not part of insert query
			-- and source table key values can be pulled
			--AND	COLMAP.ACTIVE_ROW='Y' 
			AND COLMAP.Src_Tabl_PK='Y' AND
			-- DETAILS DEFINED FROM PERSPECTIVE OF CHILD AND NOT PARENT 
			(COLMAP.SRC_TABLENAME IS NOT NULL AND COLMAP.SRC_TABLENAME <> '')
			 AND COLMAP.Dest_Tabl_PK = 'N'	
			GROUP BY TBL_COL_ROWID,PARENT_TABLE_LIST.TBL_ROWID 
			WITH UR;
		
		
		DECLARE CONTINUE HANDLER FOR SQLSTATE '02000' SET EOF1 = 1;
		DECLARE CONTINUE HANDLER FOR SQLEXCEPTION,SQLWARNING,NOT FOUND
		BEGIN
			 GET DIAGNOSTICS EXCEPTION 1
	            vErrMsg = MESSAGE_TEXT;
			SET SQLDIS=SQLCODE;
		END;
		--COMMENT#: TO MAINTAIN WHETHER OR NOT AN INSERT/UPDATE ACTIVITY WAS PERFORMED ON THE READ RECORD, IF YES THEN SAME CAN BE PASSED TO PARENT SP AND RECORD READSTATUS 
		--IN SOURCE CAN BE UPDATED TO 'R' FROM 'UR'
		--IF pTabDecision = 'Y' THEN 
		SET vUPDATE_READSTATUS='UR';
		--END IF;
		--COMMENT#: REPLACE EXCLAMATION IN THE COLUMN NAME IF USED FOR ANY DERIVED COLUMN
		
		--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('CR-SQLDIS:128',SQLDIS);
		
		SET pSrcColNm = REPLACE(pSrcColNm,'!',',');
		-- S - SELECT, I - INSERT, U - UPDATE    
		IF (pReturnType = 'S') THEN
			SET vROWSFETCHED = 0;
			-- VALIDATION#: 
			IF (pSrcTabNm <> '' AND pSrcTabIDCol <> '') THEN
				
				SET pSrc_Parent_Ref_Col_Nm = REPLACE(pSrc_Parent_Ref_Col_Nm,'!',',');
				
				-- COMMENT#: WHERE CLAUSE FILTER TO BE APPLIED TO SOURCE DATA
				IF (SELECT COUNT(*) FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID = pTBL_RID AND  ((SRC_CONDITION_COLNM <> '' AND SRC_CONDITION_COLNM IS NOT NULL) OR (SRC_CONDITION_VAL <> '' AND SRC_CONDITION_VAL IS NOT NULL))) >= 1 THEN
										
					--COMMENT#: FETCH THE WHERE CLAUSE FOR THE GIVEN SOURCE TABLE
					SELECT LEFT(CAST(LISTAGG(COALESCE(SRC_CONDITION_COLNM,'') || COALESCE(SRC_CONDITION_VAL,'') || ' AND ','') WITHIN GROUP (ORDER BY COL_ROWID)  AS CLOB(1212113))
					,LENGTH(CAST(LISTAGG(COALESCE(SRC_CONDITION_COLNM,'') || COALESCE(SRC_CONDITION_VAL,'') || ' AND ','') WITHIN GROUP (ORDER BY COL_ROWID)  AS CLOB(1212113)))-5)
					INTO  vSRC_WHERE_Clause_WITH_VALUE
					FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID = pTBL_RID AND  ((SRC_CONDITION_COLNM <> '' AND SRC_CONDITION_COLNM IS NOT NULL) OR (SRC_CONDITION_VAL <> '' AND SRC_CONDITION_VAL IS NOT NULL));
					
				   -- INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('CR-SQLDIS:147',SQLDIS);
				    
				    IF vSRC_WHERE_Clause_WITH_VALUE LIKE '%JOIN%' THEN
				    	--COMMENT#: ADDING A FILTER TO READ ONLY THE RECORDS WHICH ARE NOT READ
						IF pTabDecision='Y' THEN
							SET vREAD_STATUS_FILTER = ' AND A.READSTATUS = ''UR''';
						END IF;
						
						IF LOCATE('VARCHAR_FORMAT(',pSrc_Parent_Ref_Col_Nm) > 0 THEN
							SET pSrc_Parent_Ref_Col_Nm = REPLACE(REPLACE(pSrc_Parent_Ref_Col_Nm,'COALESCE(','COALESCE(A.'),'COALESCE(A.VARCHAR_FORMAT(','COALESCE(VARCHAR_FORMAT(A.'); 
							--REPLACE(pSrc_Parent_Ref_Col_Nm,'VARCHAR_FORMAT(','VARCHAR_FORMAT(A.');
						ELSE
							SET pSrc_Parent_Ref_Col_Nm = REPLACE(pSrc_Parent_Ref_Col_Nm,'COALESCE(','COALESCE(A.');
						END IF;
						IF pSrc_Parent_Ref_Col_Nm IS NOT NULL AND pSrc_Parent_Ref_Col_Nm <> '' THEN
				    		SET vQry = 'SELECT DISTINCT A.' || COALESCE(pSrcTabIDCol,'') ||''|| COALESCE(','|| pSrc_Parent_Ref_Col_Nm,'')|| ' AS SRCREFCOLVAL FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(LTRIM(RTRIM(pSrcTabNm)),'') || ' A ' || COALESCE(vSRC_WHERE_Clause_WITH_VALUE,'')|| COALESCE(vREAD_STATUS_FILTER,'') || ' ORDER BY  '|| COALESCE(pSrcTabIDCol,'') ||' FOR READ ONLY WITH UR';
				    	ELSE
				    		SET vQry = 'SELECT DISTINCT A.' || COALESCE(pSrcTabIDCol,'') || ','' '' AS SRCREFCOLVAL FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(LTRIM(RTRIM(pSrcTabNm)),'') || ' A ' || COALESCE(vSRC_WHERE_Clause_WITH_VALUE,'')|| COALESCE(vREAD_STATUS_FILTER,'') || ' ORDER BY  '|| COALESCE(pSrcTabIDCol,'') ||' FOR READ ONLY WITH UR';
				    	END IF;
				    ELSE
				    	--COMMENT#: ADDING A FILTER TO READ ONLY THE RECORDS WHICH ARE NOT READ
						IF pTabDecision='Y' THEN
							SET vREAD_STATUS_FILTER = ' AND READSTATUS = ''UR''';
						END IF;
						IF pSrc_Parent_Ref_Col_Nm IS NOT NULL AND pSrc_Parent_Ref_Col_Nm <> '' THEN
				    		SET vQry = 'SELECT ' || COALESCE(pSrcTabIDCol,'') ||''|| COALESCE(',' || pSrc_Parent_Ref_Col_Nm,'')|| '  AS SRCREFCOLVAL FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(LTRIM(RTRIM(pSrcTabNm)),'') || ' ' || COALESCE(vSRC_WHERE_Clause_WITH_VALUE,'')|| COALESCE(vREAD_STATUS_FILTER,'') ||' ORDER BY  '|| COALESCE(pSrcTabIDCol,'') || ' FOR READ ONLY WITH UR';
				    	ELSE
				    		SET vQry = 'SELECT ' || COALESCE(pSrcTabIDCol,'') || ','' ''  AS SRCREFCOLVAL FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(LTRIM(RTRIM(pSrcTabNm)),'') || ' ' || COALESCE(vSRC_WHERE_Clause_WITH_VALUE,'')|| COALESCE(vREAD_STATUS_FILTER,'') ||' ORDER BY  '|| COALESCE(pSrcTabIDCol,'') || ' FOR READ ONLY WITH UR';
				    	END IF;
				    END IF;
				     			
					PREPARE S1 FROM vQry;
					
					OPEN CrSr_Config_Data_LoadScript;
					
					--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('CR-SQLDIS:183',SQLDIS);
					-- COMMENT#: TO FETCH THE NUMBER OF RECORDS IN SOURCE 
				
					IF pLOG_Execution IS NULL
					--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='99') = 0
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'99','')) <> 0)  
					THEN
		 				INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'99','SPCREATESCRIPT - DATA QUERY',vQry,SQLDIS);
		 				--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 				SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'99','');
		 				
		 			END IF;
			 		
		 			IF SQLDIS < 0 THEN
		 				SET vQry = vQry;
		 				SET vQryID = pSrcTblRIDValue;
		 				SET vQryLineNum = 99;
		 				GOTO ERROR_LOG;
		 			END IF;
		 			
				ELSE
					--COMMENT#: ADDING A FILTER TO READ ONLY THE RECORDS WHICH ARE NOT READ
					IF pTabDecision='Y' THEN
						SET vREAD_STATUS_FILTER = ' WHERE READSTATUS = ''UR''';
					END IF;	
					
					IF pSrc_Parent_Ref_Col_Nm IS NOT NULL AND pSrc_Parent_Ref_Col_Nm <> '' THEN
						SET vQry = 'SELECT ' || COALESCE(pSrcTabIDCol,'') ||''|| COALESCE(',' || pSrc_Parent_Ref_Col_Nm,'')|| '  AS SRCREFCOLVAL FROM '|| COALESCE(LTRIM(RTRIM(pSrcSchNm)),'') ||'.'||COALESCE(pSrcTabNm,'')|| COALESCE(vREAD_STATUS_FILTER,'') ||' ORDER BY  '|| COALESCE(pSrcTabIDCol,'') ||' FOR READ ONLY WITH UR';
					ELSE
						SET vQry = 'SELECT ' || COALESCE(pSrcTabIDCol,'') || ','' ''  AS SRCREFCOLVAL FROM '|| COALESCE(LTRIM(RTRIM(pSrcSchNm)),'') ||'.'||COALESCE(pSrcTabNm,'')|| COALESCE(vREAD_STATUS_FILTER,'') ||' ORDER BY  '|| COALESCE(pSrcTabIDCol,'') ||' FOR READ ONLY WITH UR';
					END IF;
				    PREPARE S1 FROM vQry;
					
					OPEN CrSr_Config_Data_LoadScript;
					
					-- COMMENT#: TO FETCH THE NUMBER OF RECORDS IN SOURCE 
					
					IF pLOG_Execution IS NULL 
					--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='110') = 0
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'110','')) <> 0)  
					THEN
		 				INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'110','SPCREATESCRIPT - DATA QUERY',vQry,SQLDIS);
		 				--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 				SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'110','');
		 				
		 			END IF;
			 		
		 			IF SQLDIS < 0 THEN
		 				SET vQry = vQry;
		 				SET vQryID = pSrcTblRIDValue;
		 				SET vQryLineNum = 110;
		 				GOTO ERROR_LOG;
		 			END IF;
		 			
				END IF;
										
		    END IF;
		ELSEIF (pReturnType = 'I') THEN
			-- VALIDATION#: COUNT(*) FROM SOURCE MUST RETURN ONLY ONE RECORD ELSE GIVE ERROR------
			
			-- VALIDATION#: IF PARENT TABLE AND CHILD TABLE EXISTS THEN CHECK PK_DEFINED FOR CHILD TABLE IN COLMAPPING TABLE ELSE GIVE ERROR------
			--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('CR-SQLDIS:240',SQLDIS);
			--COMMENT#: Current table is a ((PARENT AND CHILD) OR CHILD)
			IF pParent_Table_Flag = 'YN' OR pParent_Table_Flag = 'N' THEN
				-- COMMENT#: CURSOR PROVIDES INDIVIDUAL RECORD FOR EACH PARENT WITH SOURCE COLUMN PK COMBINATION, SO THAT IN CASE OF 2 PARENTS
				-- 			WITH DIFFERENT SOURCE COMBINATION, IDENTITY VALUE CAN BE FETCHED ACCORDINGLY.
				--			FINAL STRING IS GENERATED WITH ALL THE IDENTITY VALUE AND COLUMN NAMES
				
					
				OPEN CrSr_Config_IDENTITY_value;
				FETCH CrSr_Config_IDENTITY_value INTO vParent_ROWID,vSrc_Parent_Ref_Col_Nm;
				WHILE (EOF1 = 0)DO
					--INSERT INTO RWW5.debugtext (VARNAME, VINT) VALUES  ( 'EOF1',EOF1); 
					--COMMENT#: WHEN COLUMN NAME HAS FORMATTING TO BE DONE, AND ',' NEEDS TO BE SPECIFIED WHILE DEFINING THE COLUMN IN CONFIG TABLE '!' IS SPECIFIED
					SET vSrc_Parent_Ref_Col_Nm = REPLACE(vSrc_Parent_Ref_Col_Nm,'!',',');
					-- COMMENT#: SOURCE PK COLUMN VALUE COMMA SEPARATED
					--COMMENT#: SOURCE JOIN CONDITION IS NOT INCLUDED BECAUSE SOURCE KEY COLUMNS MUST BE DERIVED FROM SOURCE TABLE AND NOT FROM ITS JOIN TABLES, SO SOURCE JOIN CONDITION IS NOT REQUIRED IN BELOW QUERY   
					SET vQry = 'SET ? = (SELECT '|| COALESCE(vSrc_Parent_Ref_Col_Nm,'') ||' FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(pSrcTabNm,'')||' WHERE '||COALESCE(pSrcTabIDCol,'') || ' = ('|| COALESCE(pSrcTblRIDValue,'') ||')) ';
					PREPARE S1 FROM vQry;				
					EXECUTE S1 INTO vSrc_Parent_Ref_Col_Val;
					
					
					
					IF pLOG_Execution IS NULL 
					--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'208','')) <> 0)  
					THEN
		 				INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'208','SPCREATESCRIPT - VAR QUERY',vQry,SQLDIS);
		 				--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 				SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'208','');
		 				--COMMIT;
		 			END IF;
			 		--END;
		 			IF SQLDIS < 0 THEN
		 				SET vQry = vQry;
		 				SET vQryID = pSrcTblRIDValue;
		 				SET vQryLineNum = 208;
		 				GOTO ERROR_LOG;
		 			END IF;
		 			
		 			--SET vSrc_Parent_Ref_Col_Val =  '%'||vSrc_Parent_Ref_Col_Val||'%';
					
					-- COMMENT#: PARENT TABLE IDENTITY KEY WITH COLUMN NAME
					SELECT COALESCE(CAST(DEST_IDENTITY AS VARCHAR(25)),''),COALESCE(CHILD_PK_COL_NM,''),COALESCE(CHILD_CONFIG_ROWID,'') 
					INTO  vDEST_ID,vCHILD_PK_COLNM_COMMA,vCHILD_CONFIG_ROWID
					FROM RWW5.CONFIG_Dest_IDENTITY
					WHERE PARENT_CONFIG_ROWID = vParent_ROWID AND CHILD_CONFIG_ROWID LIKE '%'||pTBL_RID||'%' 
					AND SRC_PARENT_COL_VALUE = vSrc_Parent_Ref_Col_Val; 
					--LIKE '%'||vSrc_Parent_Ref_Col_Val||'%';
					--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('CR-SQLDIS:294',SQLDIS);
					
					SELECT SUBSTR(CAST(LISTAGG(CAST(COALESCE(vDEST_ID,'') AS VARCHAR(500)) || ' AS ' 
						--COMMENT#: AS DATA IS STORED COMMA SEPARATED TO ENTER ONLY ONE RECORD FOR EACH CHILD
						|| COALESCE(CHILD_PK_COL_NM.COLUMN_VALUES,'') || ','
							,'')  as CLOB(451375))
					,1
					,LENGTH(CAST(LISTAGG(CAST(COALESCE(vDEST_ID,'') AS VARCHAR(500)) || ' AS ' 
						|| COALESCE(CHILD_PK_COL_NM.COLUMN_VALUES,'') || ',','')  as CLOB(451375)))-1) 
					
					INTO vParent_Identity_Key_Single_Col 
					FROM (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vCHILD_PK_COLNM_COMMA,','))) as CHILD_PK_COL_NM INNER JOIN
					(SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(vCHILD_CONFIG_ROWID,','))) as CHILD_CONFIG_ROWID 
					ON CHILD_CONFIG_ROWID.ID = CHILD_PK_COL_NM.ID WHERE CHILD_CONFIG_ROWID.COLUMN_VALUES = pTBL_RID;
					
					--INSERT INTO RWW5.debugtext (VARNAME,VINT) VALUES  ('CR-SQLDIS:308',SQLDIS);
					
					IF SQLDIS < 0 THEN
		 				SET vQry = 'ISSUE WITH QRY USE TO CALCULATE DEST_IDENTITY FROM CONFIG_DEST_IDENTITY TABLE';
		 				SET vQryID = pSrcTblRIDValue;
		 				SET vQryLineNum = 308;
		 				GOTO ERROR_LOG;
		 			END IF;
					
					IF EOF1 = 1 THEN
						SET EOF1 = 0;
					END IF;
					--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pTBL_RID ',pTBL_RID);  
					--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'vSrc_Parent_Ref_Col_Val ',vSrc_Parent_Ref_Col_Val);
					--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'vParent_Identity_Key_Single_Col ',vParent_Identity_Key_Single_Col);
					
					
					--COMMENT# IN CASE OF DAILY FEED - FETCH THE VALUE FROM DESTINATION TABLES - WHEN ONLY CHILD TABLE IS SENT AND NOT PARENT TABLE - ONLY WHEN ITS A DAILY FEED
					IF (vParent_Identity_Key_Single_Col = '' OR vParent_Identity_Key_Single_Col IS NULL) AND (pTabDecision='Y'
					--COMMENT: HARDCODED THE BELOW VALUES - as ADVR & SALES_REPS details are only expected from DAILY FEED / HBM+, SO IN CASE OF ONETIME/UNUM FEED THE ID COLUMN MUST BE FETCHED
		    		-- FROM EXISTING RECORDS.
					OR (pTabDecision='N' AND (COALESCE(pDestTabNm,'') = 'PLN_SPONSR_SALES_REPS' OR COALESCE(pDestTabNm,'') = 'PLN_SPONSR_ADVRS' OR COALESCE(pDestTabNm,'') = 'PLN_MEMBER_BILLING'))) 
					
					THEN
						 
					
						--COMMENT#: IF A VALID COLUMNS EXISTS (WHICH IS DEFINED WITH A DOT '.' IN COLMAPPING TABLE) THEN ONLY TRY TO MAKE THE QUERY
						-- THIS IS TO AVOID COLUMNS WHICH ARE NOT TO BE CONSIDERED FOR SELECT
						IF (SELECT COUNT(*) FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID=pTBL_RID AND SRC_TABLENAME = vParent_ROWID AND DEST_TABL_PK='Y' 
						AND LOCATE('.',DEST_COLUMNNAME)>0) > 0 THEN 
							
							
							--COMMENT#: WHETHER A JOIN CONDITION DEFINED AS PER 2 OR MORE TABLE REFRENCES IN THE CONFIG TABLE
							IF LOCATE('||',pND_SrcDest_ColmNm) > 0 THEN
								
								/***INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pTDD_SrcColumnNm ',pTDD_SrcColumnNm);
								INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pTDD_Src_CHAR_DATATYPE ',pTDD_Src_CHAR_DATATYPE);
								INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pTDD_DestColumnNm ',pTDD_DestColumnNm);
								INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pTDD_Dest_CHAR_DATATYPE ',pTDD_Dest_CHAR_DATATYPE);
								INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pND_SrcDest_ColmNm ',pND_SrcDest_ColmNm);
								INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pND_ParentTablRef ',pND_ParentTablRef);
								***/
								
								
								
								SELECT  
				    			-- COMMENT# WHERE CLAUSE FOR THE DESTINATION TABLE TO IDENTIFY WHETHER OR NOT DATA EXISTS
				    			-- EXAMPLE : STRING TO BE GENERATED AS -> 'DEST_COLNM'|| = ||'''SRC_COLNM'''
				    			-- SO WHEN DESTINATION QUERY IS EXEXCUTED ITH WILL BE:
				    			-- FINAL QUERY: SELECT COUNT(*) FROM DEST_TABLE WHERE DEST_COLNM = '2154654'
				    			
									--COMMENT#: CONSIDER ONLY THE COLUMN NAMES WHICH ARE TAGGED AS 'Y'							
									LEFT(CAST(LISTAGG( CASE WHEN NDDestColmnm.COLUMN_VALUES = 'Y' THEN
										'''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
										CASE WHEN DestDOMINST.COLUMN_VALUES = 'Y' THEN
											--- COMMENT#: IN DESTINATION TABLE WHEN COLUMN IS INT AS FETCH FROM DOMINSTANCE TABLE
											-- EXPECTED : A.PROD =  COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM_INST where CODE ='BD' ORDER BY DOM_INST_ID fetch first 1 rows only),00000)
											CASE WHEN SrcCharType.COLUMN_VALUES = 'Y' THEN 
											' = COALESCE((SELECT DOM_INST_ID FROM '|| pDestSchmNm ||'.DOM D INNER JOIN '|| pDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'' ) OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||''' 
											ELSE 
											' = COALESCE((SELECT DOM_INST_ID FROM '|| pDestSchmNm ||'.DOM D INNER JOIN '|| pDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||''' END --,'') within group (order by SrcColNm.ID) as CLOB(451375))
										ELSE
											--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
											CASE WHEN SrcCharType.COLUMN_VALUES = 'Y' THEN 
											' = '''''' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') || '''''' AND '' ||' 
											ELSE 
											' = '' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') ||'' AND '' ||' END 
										END
										ELSE ''
										END,'') within group (order by SrcColNm.ID) as CLOB(451375))
										,
										LENGTH
										(CAST(LISTAGG( CASE WHEN NDDestColmnm.COLUMN_VALUES = 'Y' THEN
										'''' || COALESCE(DestColNm.COLUMN_VALUES,'') || 
										CASE WHEN DestDOMINST.COLUMN_VALUES = 'Y' THEN
											--- COMMENT#: IN DESTINATION TABLE WHEN COLUMN IS INT AS FETCH FROM DOMINSTANCE TABLE
											-- EXPECTED : A.PROD =  COALESCE((SELECT DOM_INST_ID FROM '|| vDestSchmNm ||'.DOM_INST where CODE ='BD' ORDER BY DOM_INST_ID fetch first 1 rows only),00000)
											CASE WHEN SrcCharType.COLUMN_VALUES = 'Y' THEN 
											' = COALESCE((SELECT DOM_INST_ID FROM '|| pDestSchmNm ||'.DOM D INNER JOIN '|| pDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'' ) OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='''''' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') || ''''''''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||''' 
											ELSE 
											' = COALESCE((SELECT DOM_INST_ID FROM '|| pDestSchmNm ||'.DOM D INNER JOIN '|| pDestSchmNm ||'.DOM_INST DI ON D.DOM_ID = DI.DOM_ID where (DI.DOM_ID='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') OR (0 ='||COALESCE(DestDOMID.COLUMN_VALUES,'')||' AND CODE ='' || COALESCE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''') ||''||'') ORDER BY DOM_INST_ID fetch first 1 rows only),00000) AND ''||''' END --,'') within group (order by SrcColNm.ID) as CLOB(451375))
										ELSE
											--- COMMENT#: CHAR DATA TYPE SINGLE QUOTES TO BE ADDED FOR VALUE
											CASE WHEN SrcCharType.COLUMN_VALUES = 'Y' THEN 
											' = '''''' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') || '''''' AND '' ||' 
											ELSE 
											' = '' || COALESCE(REPLACE('|| COALESCE(SrcColNm.COLUMN_VALUES,'') ||','''''''',''''''''''''),'''') ||'' AND '' ||' END 
										END
										ELSE ''
										END,'') within group (order by SrcColNm.ID) as CLOB(451375))) - 8
										) ||''''									
								INTO vND_WhereClause_ChildInsert_Colnm
								
								FROM (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pTDD_SrcColumnNm,','))) as SrcColNm
								INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pTDD_Src_CHAR_DATATYPE,','))) as SrcCharType ON SrcColNm.ID = SrcCharType.ID
								INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pTDD_DestColumnNm,','))) as DestColNm ON SrcColNm.ID = DestColNm.ID 
								INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pTDD_Dest_CHAR_DATATYPE,','))) as DestCharType ON DestColNm.ID = DestCharType.ID
								INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pTDD_Dest_DOMINST,','))) as DestDOMINST ON DestColNm.ID = DestDOMINST.ID
								INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pTDD_Dest_DOMID,','))) as DestDOMID ON DestColNm.ID = DestDOMID.ID
								INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(
								(SELECT NDDestColmnm_Pipes.COLUMN_VALUES FROM								
								(SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pND_SrcDest_ColmNm,'||'))) AS NDDestColmnm_Pipes
								INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pND_ParentTablRef,'||'))) AS NDParenTable_Pipes 
								ON NDDestColmnm_Pipes.ID = NDParenTable_Pipes.ID
								WHERE NDParenTable_Pipes.COLUMN_VALUES=vParent_ROWID)
								,','))) AS NDDestColmnm ON NDDestColmnm.ID = DestDOMID.ID;
								
								INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'vND_WhereClause_ChildInsert_Colnm ',vND_WhereClause_ChildInsert_Colnm);
								
								SET vQry = 'SET ? = (SELECT '|| COALESCE(vND_WhereClause_ChildInsert_Colnm,'') ||' FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(pSrcTabNm,'')||' WHERE '||COALESCE(pSrcTabIDCol,'') || ' = ('|| COALESCE(pSrcTblRIDValue,'') ||')) ';
								PREPARE S1 FROM vQry;				
								EXECUTE S1 INTO pND_WhereClause_ChildInsert;
								
								IF pLOG_Execution IS NULL 
								--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
								--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='279') = 0
								AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'279','')) <> 0)
								THEN
					 				INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'279','SPCREATESCRIPT - VAR QUERY',vQry,SQLDIS);
					 				--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
					 				SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'279','');
					 				
					 			END IF;
						 		
					 			IF SQLDIS < 0 THEN
					 				SET vQry = vQry;
		 							SET vQryID = pSrcTblRIDValue;
		 							SET vQryLineNum = 279;
					 				GOTO ERROR_LOG;
					 			END IF;
								
								--COMMENT#: PULL THE JOIN CONDITION FOR THE RESPECTIVE TBL_RID											
								SELECT NDJOINCOND_Pipes.COLUMN_VALUES
								INTO pND_FromJoinCond_ChildInsert 
								FROM								
								(SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pND_FromJOINCond,'||'))) AS NDJOINCOND_Pipes
								INNER JOIN (SELECT ROW_NUMBER() OVER() AS ID,COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(pND_ParentTablRef,'||'))) AS NDParenTable_Pipes 
								ON NDJOINCOND_Pipes.ID = NDParenTable_Pipes.ID
								WHERE NDParenTable_Pipes.COLUMN_VALUES=vParent_ROWID;											
								
								IF SQLDIS < 0 THEN
									SET vQry =  'QRY TO PULL JOIN CONDITION FOR NEW DATA';
		 							SET vQryID = pSrcTblRIDValue;
		 							SET vQryLineNum = 355;
					 				GOTO ERROR_LOG;
					 			END IF;
								
								
								
							END IF;
							--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pND_WhereClause_ChildInsert ',pND_WhereClause_ChildInsert);
							--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pND_FromJoinCond_ChildInsert ',pND_FromJoinCond_ChildInsert);
							IF ((pND_WhereClause_ChildInsert <>'' AND pND_WhereClause_ChildInsert IS NOT NULL) AND (pND_FromJoinCond_ChildInsert<>'' AND pND_FromJoinCond_ChildInsert IS NOT NULL)) THEN													 						
								SET vQry = 'SET ? = (SELECT DISTINCT CAST('|| COALESCE((SELECT DEST_COLUMNNAME AS COLUMN_VALUES FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID=pTBL_RID AND SRC_TABLENAME = vParent_ROWID  
								AND DEST_TABL_PK='Y' AND LOCATE('.',DEST_COLUMNNAME)>0 ORDER BY TBL_COL_ROWID,COL_ROWID),'') 
								||' AS VARCHAR(500)) FROM '
								|| COALESCE(pND_FromJoinCond_ChildInsert,'')||' WHERE '||COALESCE(pND_WhereClause_ChildInsert,'') ||') ';
								PREPARE S1 FROM vQry;				
								EXECUTE S1 INTO vParent_Identity_Key_Single_Col;
								
		
								IF pLOG_Execution IS NULL 
								--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
								--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='307') = 0
								AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'307','')) <> 0)  
								THEN
									INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'307','SPCREATESCRIPT - VAR QUERY',vQry,SQLDIS);
									--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
									SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'307','');
				 				
				 				END IF;
						 		
					 			IF SQLDIS < 0 THEN
					 				SET vQry = vQry;
					 				SET vQryID = pSrcTblRIDValue;
					 				SET vQryLineNum = 307;
					 				GOTO ERROR_LOG;
					 			END IF;
							END IF;
							
							IF vParent_Identity_Key_Single_Col <> '' AND vParent_Identity_Key_Single_Col IS NOT NULL THEN
								SET vParent_Identity_Key_Single_Col = vParent_Identity_Key_Single_Col || ' AS ' ||  COALESCE((SELECT RTRIM(LTRIM(SUBSTR(DEST_COLUMNNAME,LOCATE('.',DEST_COLUMNNAME)+1,LENGTH(DEST_COLUMNNAME)))) AS COLUMN_VALUES FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID=pTBL_RID AND SRC_TABLENAME = vParent_ROWID  AND DEST_TABL_PK='Y' ORDER BY TBL_COL_ROWID,COL_ROWID),'');
							END IF;
						END IF;				
					END IF;
					--INSERT INTO RWW5.debugtext (VARNAME, VINT) VALUES  ( 'EOF1:FETCH',EOF1);
					-- COMMENT#: TO AVOID THE INITIAL ',' DURING FIRST LOOP
					IF (vParent_Identity_Key IS NULL OR vParent_Identity_Key = '') THEN
						SET vParent_Identity_Key = COALESCE(vParent_Identity_Key_Single_Col,'');
					ELSEIF (vParent_Identity_Key_Single_Col IS NOT NULL AND vParent_Identity_Key_Single_Col <> '') THEN
						SET vParent_Identity_Key = COALESCE(vParent_Identity_Key,'') || ',' || COALESCE(vParent_Identity_Key_Single_Col,'');	
					END IF;					
					
					
					IF LOCATE('||',pND_SrcDest_ColmNm) > 0 THEN				
						SET pND_FromJoinCond_ChildInsert = '';
						SET pND_WhereClause_ChildInsert = '';
					END IF;
					
					--INSERT INTO RWW5.debugtext (VARNAME, VINT) VALUES  ( 'EOF1:FETCH',EOF1);
		    		--INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'vParent_Identity_Key ',vParent_Identity_Key);
		    		
		    		SET vDEST_ID = '';
		    		SET vCHILD_PK_COLNM_COMMA = '';
		    		SET vCHILD_CONFIG_ROWID = '';
					
					--COMMENT#: To identify the number of parent reference, so that in case of NULL reference CHILD insert can be skipped
					SET vLoopCnt = vLoopCnt + 1;
					--INSERT INTO RWW5.debugtext (VARNAME, VINT) VALUES  ( 'EOF1:FETCH',EOF1);
					
					FETCH CrSr_Config_IDENTITY_value INTO vParent_ROWID,vSrc_Parent_Ref_Col_Nm;
				END WHILE;
				
				--INSERT INTO RWW5.debugtext (VARNAME, VINT) VALUES  ( 'vLoopCnt ',vLoopCnt);
				--INSERT INTO RWW5.debugtext (VARNAME, VINT) VALUES  ( 'LENGTH ',(LENGTH(vParent_Identity_Key) - LENGTH(REPLACE(vParent_Identity_Key,',',''))));
					
				--#COMMENT# VALID VALUE WAS FOUND FOR CHILD DATA IN THE PARENT TABLE
				IF (vParent_Identity_Key IS NOT NULL AND vParent_Identity_Key <> '' AND LOCATE('AS',vParent_Identity_Key) > 2) THEN
					
					--COMMENT#: TO IDENTIFY WHETHER SAME COLUMN KEYS ARE GENERATED BECAUSE OF DUPLICATE DATA IN SOURCE PARENT TABLE
					IF EXISTS (SELECT  SUBSTR(COLUMN_VALUES,LOCATE('AS',COLUMN_VALUES)) FROM TABLE(PWW5.FN_SPLIT(vParent_Identity_Key,',')) 
					GROUP BY SUBSTR(COLUMN_VALUES,LOCATE('AS',COLUMN_VALUES)) HAVING COUNT(SUBSTR(COLUMN_VALUES,LOCATE('AS',COLUMN_VALUES))) > 1) THEN
							ROLLBACK TO SAVEPOINT BEFORE_TABLE_INSERT;													
							INSERT INTO RWW5.LOG_ERROR(BATCH,TBL_ROWID,Error_description,Error_Msg,Error_Code,QRYID,QRY,QRYLINENUM) VALUES (pBatchNum,pTBL_RID,'ERROR - SPCREATESCRIPT','DUPLICATE DATA IN SOURCE: ' || CAST(vParent_Identity_Key AS CLOB(12134213)),1000001,vQryID,'',532);
							UPDATE RWW5.CONFIG_TBLMAPPING SET LASTUSED_DT = CURRENT TIMESTAMP, ACTIVE_ROW='N',ImportStatus='ERROR' WHERE TBL_ROWID = pTBL_RID;
							SET vReturnStatus = 1000001;
							RETURN;
					END IF;
					
					IF 
					-- LOOP COUNT = 3
					-- 3 ID COLUMNS ARE EXPECTED WITH A vParent_Identity_Key STRING HAVING 2 COMMAS
					-- EG: LENGTH OF vParent_Identity_Key (A) = 150 AND vLoopCnt = 3 (B), REPLACE COMMA LENGTH OF vParent_Identity_Key (C) = 148
					-- A-C = 2 AND B-1 = 2
					--THAT MEANS ABOVE LOGIC HAS GOT VALID IDENTITY VALUE FOR ALL 3 ID COLUMNS OF THE CHILD AND ITS A VALID INSERT
					-- IF THE BELOW CONDITION IS NOT APPLIED THEN INSERT FAILS AND GIVES INVALID FOREIGN KEY ERROR
					((LENGTH(vParent_Identity_Key) - LENGTH(REPLACE(vParent_Identity_Key,',',''))) = (vLoopCnt - 1)) THEN
						
						
						-- COMMENT#: FROM SELECT COLUMN LIST GET THE COLUMN NAMES
						SELECT SUBSTR(
						LISTAGG(LTRIM(RTRIM(SUBSTR(COLUMN_VALUES,LOCATE('AS ',COLUMN_VALUES)+3,LENGTH(COLUMN_VALUES))))||',','')
						,1,
						LENGTH(LISTAGG(LTRIM(RTRIM(SUBSTR(COLUMN_VALUES,LOCATE('AS ',COLUMN_VALUES)+3,LENGTH(COLUMN_VALUES))))||',',''))
						
						)
						INTO vParent_Identity_Key_col_nm 
						FROM TABLE(PWW5.FN_split(vParent_Identity_Key,',')) WHERE COLUMN_VALUES IS NOT NULL AND COLUMN_VALUES <>'';
						
						--COMMENT#: MOVED TO PARENT SP
						SELECT SRC_CONDITION_VAL
						INTO  vSRC_WHERE_Clause_WITH_VALUE
						FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID = pTBL_RID AND  ((SRC_CONDITION_COLNM <> '' AND SRC_CONDITION_COLNM IS NOT NULL) OR (SRC_CONDITION_VAL <> '' AND SRC_CONDITION_VAL IS NOT NULL));
					    
					    
					    
					    --COMMENT#: WHEN DATA FOR SINGLE DESTINATION TABLE IS COMING FROM MULTIPLE SOURCE TABLE
					    -- DISTINCT IS ADDED IN THE SELECT STATEMENT, AS DURING DAILY FEED PARENT TABLES ARE LOAD FROM CHILD SOURCES SO TO AVOID DUPLICATE DATA
					    -- LIKE DISTINCT UNUM_PLN_SPONSR_DIV TO PLN_SPONSR 
					    IF vSRC_WHERE_Clause_WITH_VALUE LIKE '%JOIN%' THEN
					    	-- COMMENT#: INSERT INTO DESTINATION & GET ID VALUE
							SET vQry = ' INSERT INTO ' || COALESCE(pDestSchNm,'') || '.'|| COALESCE(pDestTabNm,'') ||' ('|| COALESCE(vParent_Identity_Key_col_nm || '' ,'') || ' '||COALESCE(pDestColNm,'')|| COALESCE(','|| pSrcColNm_DomInst_COLNM,'') ||') SELECT DISTINCT '|| COALESCE(vParent_Identity_Key || ',' ,'') || ' ' ||COALESCE(pSrcColNm,'') || COALESCE(','|| pSrcColNm_DomInst_forSELECT,'') || ' FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(pSrcTabNm,'')||' AS A '|| COALESCE(vSRC_WHERE_Clause_WITH_VALUE,'') ||' AND A.'||COALESCE(pSrcTabIDCol,'') || ' = ('|| COALESCE(pSrcTblRIDValue,'') ||') '||' ';
					    ELSE
					    	-- COMMENT#: INSERT INTO DESTINATION & GET ID VALUE
							SET vQry = ' INSERT INTO ' || COALESCE(pDestSchNm,'') || '.'|| COALESCE(pDestTabNm,'') ||' ('|| COALESCE(vParent_Identity_Key_col_nm || '' ,'') || ' '||COALESCE(pDestColNm,'')|| COALESCE(','|| pSrcColNm_DomInst_COLNM,'') ||') SELECT '|| COALESCE(vParent_Identity_Key || ',' ,'') || ' ' ||COALESCE(pSrcColNm,'') || COALESCE(','|| pSrcColNm_DomInst_forSELECT,'') || ' FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(pSrcTabNm,'')||' WHERE '||COALESCE(pSrcTabIDCol,'') || ' = ('|| COALESCE(pSrcTblRIDValue,'') ||') '||' ';
						
					    END IF;
						
						
						
					    PREPARE S1 FROM vQry;				
						EXECUTE S1;		
						
						IF pLOG_Execution IS NULL 
						--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
						--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='311') = 0
						AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'311','')) <> 0)  
						THEN
			 				INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'311','SPCREATESCRIPT - DATA QUERY',vQry,SQLDIS);
			 				--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
			 				SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'311','');
			 				--COMMIT;
			 			END IF;
			 			--END;
			 			IF SQLDIS < 0 THEN
			 				SET vQry = vQry;
			 				SET vQryID = pSrcTblRIDValue;
			 				SET vQryLineNum = 311;
			 				GOTO ERROR_LOG;
			 			END IF;
			 			
			 			--COMMENT# UPDATE THE INSERT COUNT
						--UPDATE RWW5.CONFIG_TBLMAPPING
				    	--SET INSERT_RECORDCOUNT = INSERT_RECORDCOUNT + 1
				    	--WHERE TBL_ROWID = pTBL_RID;
				    	
				    	SET pINSERT_RECORDCOUNT = pINSERT_RECORDCOUNT + 1;
			 			
						-- COMMENT#: IF THE CHILD TABLE IS ALSO A PARENT, THEN IT HAS TO PERFORM INSERTS INTO IDENTITY TABLE
						IF pParent_Table_Flag = 'YN' THEN
							GOTO IdentityTable_Insert;
						ELSE
							--COMMENT#: SETTING THE SOURCE RECORD READ STATUS TO 'R'
							IF pUPDATE_TABLE_READSTATUS = 'Y' THEN
								SET vUPDATE_READSTATUS='R';
							END IF;
						END IF;	
					
				    END IF;
				END IF;
				
				
			--COMMENT#: Current table is a PARENT
			ELSEIF pParent_Table_Flag = 'Y' THEN
				
				SELECT SRC_CONDITION_VAL
				INTO  vSRC_WHERE_Clause_WITH_VALUE
				FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID = pTBL_RID AND  ((SRC_CONDITION_COLNM <> '' AND SRC_CONDITION_COLNM IS NOT NULL) OR (SRC_CONDITION_VAL <> '' AND SRC_CONDITION_VAL IS NOT NULL));
				
							
			    --COMMENT#: WHEN DATA FOR SINGLE DESTINATION TABLE IS COMING FROM MULTIPLE SOURCE TABLE
			    IF vSRC_WHERE_Clause_WITH_VALUE LIKE '%JOIN%' THEN
			    	-- COMMENT#: INSERT INTO DESTINATION & GET ID VALUE
					SET vQry = ' INSERT INTO ' || COALESCE(pDestSchNm,'') || '.'|| COALESCE(pDestTabNm,'') ||' ('||COALESCE(pDestColNm,'')|| COALESCE(','|| pSrcColNm_DomInst_COLNM,'') ||') SELECT DISTINCT '||COALESCE(pSrcColNm,'') || COALESCE(','|| pSrcColNm_DomInst_forSELECT,'') ||' FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(pSrcTabNm,'')||' AS A '|| COALESCE(vSRC_WHERE_Clause_WITH_VALUE,'') ||' AND A.'|| COALESCE(pSrcTabIDCol,'') || ' = ('|| COALESCE(pSrcTblRIDValue,'') ||') '||' ';
			    ELSE
			    	-- COMMENT#: INSERT INTO DESTINATION & GET ID VALUE
					SET vQry = ' INSERT INTO ' || COALESCE(pDestSchNm,'') || '.'|| COALESCE(pDestTabNm,'') ||' ('||COALESCE(pDestColNm,'')|| COALESCE(','|| pSrcColNm_DomInst_COLNM,'') ||') SELECT '||COALESCE(pSrcColNm,'') || COALESCE(','|| pSrcColNm_DomInst_forSELECT,'') ||' FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(pSrcTabNm,'')||' WHERE '||COALESCE(pSrcTabIDCol,'') || ' = ('|| COALESCE(pSrcTblRIDValue,'') ||') '||' ';
			    END IF;
				
				
				--PREPARE S1 FROM vQry;				
				EXECUTE IMMEDIATE vQry;
				 
				IF pLOG_Execution IS NULL 
				--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='536') = 0
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'536','')) <> 0)  
					THEN
		 			INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'536','SPCREATESCRIPT - DATA QUERY',vQry,SQLDIS);
		 			--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 			SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'536','');
		 			
		 		END IF;
			 	
				IF SQLDIS < 0 THEN
					SET vQry = vQry;
	 				SET vQryID = pSrcTblRIDValue;
	 				SET vQryLineNum = 536;
	 				GOTO ERROR_LOG;
		 		END IF;
		 		
		 		--COMMENT# UPDATE THE INSERT COUNT
				--UPDATE RWW5.CONFIG_TBLMAPPING
		    	--SET INSERT_RECORDCOUNT = INSERT_RECORDCOUNT + 1
		    	--WHERE TBL_ROWID = pTBL_RID;
		    	
		    	SET pINSERT_RECORDCOUNT = pINSERT_RECORDCOUNT + 1;
				
IdentityTable_Insert:										    
			    /*SET vQry = 'SET ? = (SELECT COLNAME FROM SYSCAT.COLUMNS WHERE IDENTITY = ''Y'' AND TABSCHEMA = '''|| COALESCE(pDestSchNm,'') || ''' AND TABNAME = '''|| COALESCE(pDestTabNm,'') ||''' AND KEYSEQ > 0)';
			    PREPARE S1 FROM vQry;				
				EXECUTE S1 INTO vDest_PK_ColName;
				
				--#QUERYLOG_INSERT
				IF pLOG_Execution IS NULL 
				--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='558') = 0
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'558','')) <> 0)  
					THEN
		 			INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'558','SPCREATESCRIPT - VAR QUERY',vQry,SQLDIS);
		 			--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 			SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'558','');
		 			
		 		END IF;
			 	
		 		IF SQLDIS < 0 THEN
		 				SET vQry = vQry;
		 				SET vQryID = pSrcTblRIDValue;
		 				SET vQryLineNum = '558';
		 				GOTO ERROR_LOG;
		 		END IF;*/
				
				
				
				-- VALIDATION#: CHECK PRIMARK KEY COLNAME IS NOT BLANK------
				
			    -- COMMENT#: GET ID VALUE OF DESTINATION INSERT 
			    SET vQry = 'SET ? = (SELECT MAX('|| COALESCE(pDest_PK_ColName,'') ||') FROM ' || COALESCE(pDestSchNm,'') || '.'|| COALESCE(pDestTabNm,'') ||')';
			    PREPARE S1 FROM vQry;				
				EXECUTE S1 INTO vParent_Identity_Value;
				--#QUERYLOG_INSERT
				
				IF pLOG_Execution IS NULL
				--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='579') = 0
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'579','')) <> 0)  
					THEN
		 			INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'579','SPCREATESCRIPT - VAR QUERY',vQry,SQLDIS);
		 			--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 			SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'579','');
		 			
		 		END IF;
			 	
				IF SQLDIS < 0 THEN
					SET vQry = vQry;
	 				SET vQryID = pSrcTblRIDValue;
	 				SET vQryLineNum = '579';
	 				GOTO ERROR_LOG;
		 		END IF;
				  		   			    
			    -- COMMENT#: SOURCE PK COLUMN NAME COMMA SEPARATED
			    
			    --SELECT 	'''''''' || SUBSTR(CAST(LISTAGG(''' || COALESCE('|| COALESCE(SRC_CHILD_TABL_COLNM_PK,'') || ','''') ||'''''',''''','')within group (order by COL_ROWID) as CLOB(451375)) ,
				--1,LENGTH(CAST(LISTAGG(''' || COALESCE('|| COALESCE(SRC_CHILD_TABL_COLNM_PK,'') || ','''') ||'''''',''''','')within group (order by COL_ROWID) as CLOB(1451375)))-5)|| ''''''''
				--INTO vSrc_Parent_Ref_Col_Nm
				--FROM RWW5.CONFIG_TBLMAPPING TABMAP INNER JOIN RWW5.CONFIG_TBLCOLMAPPING COLMAP ON TABMAP.TBL_ROWID = COLMAP.TBL_COL_ROWID 
				--WHERE TABMAP.TBL_ROWID = pTBL_RID AND
				--COMMENT#: TO CONSIDER THE COLUMNS BASED ON SOURCE PK FLAG AND NOT ON BASIS OF ACTIVE COLUMN
				-- AS IN SOME CASES THERE ARE MORE PK COLUMNS THEN ACTUAL COLUMN MAPPINGS
				--(('Y' = pTabDecision AND COLMAP.Src_Tabl_PK='Y') OR
				----COMMENT#: ONE TIME FED
				--('N' = pTabDecision AND COLMAP.Src_CHILD_PK='Y')) 	
				--GROUP BY TBL_COL_ROWID;
				
				
				--COMMENT#: WHEN COLUMN NAME HAS FORMATTING TO BE DONE, AND ',' NEEDS TO BE SPECIFIED WHILE DEFINING THE COLUMN IN CONFIG TABLE '!' IS SPECIFIED
				/*SET vSrc_Parent_Ref_Col_Nm = REPLACE(pSrc_Parent_Ref_Col_Nm,'!',',');
				
				
				IF vSrc_Parent_Ref_Col_Nm <>'' AND vSrc_Parent_Ref_Col_Nm IS NOT NULL THEN
					-- COMMENT#: SOURCE PK COLUMN VALUE COMMA SEPARATED
					SET vQry = 'SET ? = (SELECT '|| vSrc_Parent_Ref_Col_Nm ||' FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(pSrcTabNm,'')||' WHERE '||COALESCE(pSrcTabIDCol,'') || ' = ('|| COALESCE(pSrcTblRIDValue,'') ||')) ';
					PREPARE S1 FROM vQry;				
					EXECUTE S1 INTO vSrc_Parent_Ref_Col_Val;
					
					--#QUERYLOG_INSERT
					IF pLOG_Execution IS NULL 
					--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='617') = 0
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'617','')) <> 0)  
					THEN
		 				INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'617','SPCREATESCRIPT - VAR QUERY',vQry,SQLDIS);
		 				--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 				SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'617','');
		 				
		 			END IF;
		 			
		 			IF SQLDIS < 0 THEN
		 				SET vQry = vQry;
		 				SET vQryID = pSrcTblRIDValue;
		 				SET vQryLineNum = '617';
		 				GOTO ERROR_LOG;
		 			END IF;
		 			
		 			---COMMENT#: IDENTIFY DUPLICATE AT PARENT LEVEL
		 			IF (SELECT COUNT(*)
					FROM RWW5.CONFIG_Dest_IDENTITY WHERE PARENT_CONFIG_ROWID=pTBL_RID AND SRC_PARENT_COL_VALUE = vSrc_Parent_Ref_Col_Val) >= 1 THEN
							ROLLBACK TO SAVEPOINT BEFORE_TABLE_INSERT;						
							INSERT INTO RWW5.LOG_ERROR(BATCH,TBL_ROWID,Error_description,Error_Msg,Error_Code,QRYID,QRY,QRYLINENUM) VALUES (pBatchNum,pTBL_RID,'ERROR - SPCREATESCRIPT','DUPLICATE DATA IN SOURCE PARENT TABLE: ' || CAST(vSrc_Parent_Ref_Col_Val AS CLOB(12134213)),1000001,vQryID,vQry,vQryLineNum);
							UPDATE RWW5.CONFIG_TBLMAPPING SET LASTUSED_DT = CURRENT TIMESTAMP, ACTIVE_ROW='N',ImportStatus='ERROR' WHERE TBL_ROWID = pTBL_RID;
							SET vReturnStatus = 1000001;
							RETURN;					
					END IF;
					
			    END IF;****/
			   
			  	---COMMENT#: IDENTIFY DUPLICATE AT PARENT LEVEL
	 			IF (SELECT COUNT(*)
				FROM RWW5.CONFIG_Dest_IDENTITY WHERE PARENT_CONFIG_ROWID=pTBL_RID AND SRC_PARENT_COL_VALUE = pSrc_Parent_Ref_Col_Val) >= 1 THEN
						ROLLBACK TO SAVEPOINT BEFORE_TABLE_INSERT;						
						INSERT INTO RWW5.LOG_ERROR(BATCH,TBL_ROWID,Error_description,Error_Msg,Error_Code,QRYID,QRY,QRYLINENUM) VALUES (pBatchNum,pTBL_RID,'ERROR - SPCREATESCRIPT','DUPLICATE DATA IN SOURCE PARENT TABLE: ' || COALESCE(pSrcTabNm,''),1000001,vQryID,'',779);
						UPDATE RWW5.CONFIG_TBLMAPPING SET LASTUSED_DT = CURRENT TIMESTAMP, ACTIVE_ROW='N',ImportStatus='ERROR' WHERE TBL_ROWID = pTBL_RID;
						SET vReturnStatus = 1000001;
						RETURN;					
				END IF;  
			    
			  /*****  INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pTBL_RID ',pTBL_RID);
				INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pCHILD_CONFIG_ROWID ',pCHILD_CONFIG_ROWID);
				INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pCHILD_DEST_PK ',pCHILD_DEST_PK);
				INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'pSrc_Parent_Ref_Col_Val ',pSrc_Parent_Ref_Col_Val);
				INSERT INTO RWW5.debugtext (VARNAME, VTEXT) VALUES  ( 'vParent_Identity_Value ',vParent_Identity_Value);
				******/
				
				
				
				IF pCHILD_CONFIG_ROWID IS NULL OR pCHILD_CONFIG_ROWID = '' THEN
					SET pCHILD_CONFIG_ROWID = ' ';
				END IF;
			    
			   -- COMMENT# ID TABLE INSERT - SINGLE ROW FOR EACH CHILD
				INSERT INTO RWW5.CONFIG_Dest_IDENTITY (Parent_Config_ROWID,Child_Config_ROWID,Child_PK_Col_Nm,Src_PARENT_COL_VALUE,Dest_IDENTITY)
				VALUES(pTBL_RID,pCHILD_CONFIG_ROWID ,pCHILD_DEST_PK ,pSrc_Parent_Ref_Col_Val ,vParent_Identity_Value);
				
				
				/****
				SELECT  pTBL_RID AS PARENT_ROW6ID, TABMAP.TBL_ROWID AS CHILD_ROWID,
				(SELECT SRC_COLUMNNAME FROM RWW5.CONFIG_TBLCOLMAPPING TCL WHERE TCL.TBL_COL_ROWID = TABMAP.TBL_ROWID AND TCL.SRC_TABLENAME = pTBL_RID
				-- COMMENT#: THE PK COLUMN CANNOT BE SET TO SRC_tABLE_PK AND SRC_COLUMNNAME CANNOT BE COMMA SEPARATED AND ONE PK COLUMN CAN HAVE REFERENCE
				------------ FROM ONE PARENT TABLE 
				AND TCL.Src_Tabl_PK='N' AND TCL.Dest_Tabl_PK = 'Y'),	
				 vSrc_Parent_Ref_Col_Val,
					vParent_Identity_Value as Dest_Identity
				 
				FROM RWW5.CONFIG_TBLMAPPING TABMAP INNER JOIN RWW5.CONFIG_TBLCOLMAPPING COLMAP ON TABMAP.TBL_ROWID = COLMAP.TBL_COL_ROWID
				WHERE pDestSchNm || '.' || pDestTabNm IN (SELECT COLUMN_VALUES FROM TABLE(PWW5.FN_SPLIT(TABMAP.DEST_PARENT_SCHM_TBLENM,',')))
				--COMMENT#: REMOVED THE ACTIVE = 'Y' TO CONSIDER THE SOURCE PK, EVEN IF THE COLUMN MAPPING IS NOT MORE THAN ONE 
				AND
				--COMMENT#: THIS IS USED IN CASES WHEN CURRENT TABLE IS A CHILD AND ALSO A PARENT
				--EG: CONTACTS ->(USING COLUMN "PLN_SPNSR_ID_TXT") -> PLN_SPONSR -> (USING COLUMN "POL_NO") ->  POL_INFO
				--COMMENT#: DAILY FEED
				COLMAP.Src_Tabl_PK='Y'
				AND TAB_DATA_DECISION = pTabDecision
				-- COMMENT#: FETCHING THE SOURCE COLUMN NAME WHICH ARE TAG TO THE CURRENT PARENT AND CAN SPECIFY MORE THAN ONE SOURCE REFERENCE
				-- BY COMMA SEPARATING THE VALUES
				AND ((COLMAP.SRC_TABLENAME =  pTBL_RID) 
				OR (COLMAP.SRC_TABLENAME LIKE '%,'|| pTBL_RID) 
				OR (COLMAP.SRC_TABLENAME LIKE pTBL_RID ||',%')
				OR (COLMAP.SRC_TABLENAME LIKE '%,'|| pTBL_RID ||',%'))				
				GROUP BY TBL_ROWID;
				
			   ****/
				--COMMENT#: SETTING THE SOURCE RECORD READ STATUS TO 'R'
				IF pUPDATE_TABLE_READSTATUS = 'Y' THEN
					SET vUPDATE_READSTATUS='R';
				END IF;
			END IF;
		ELSEIF (pReturnType = 'U') THEN
					
			--COMMENT#: WHEN A PLN_MEMBER DIV/CLSS/POL_NO IS CHANGED INSTEAD OF ADDING A NEW RECORD IN PLN_MEMBER, EXISTING RECORD PLNS_ID IS UPDATED. IDENTIFIED IN DEFECT#3789
			SET vPLNS_ID_COLNM = NULL;
			SET vPLNS_ID = NULL;  
			IF pDestTabNm = 'PLN_MEMBER' AND (pTBL_RID = '43') THEN
				SET vQry = 'SET ? = (SELECT PL.PLNS_ID FROM '|| COALESCE(pDestSchNm,'') ||'.PLANS PL INNER JOIN '|| COALESCE(pDestSchNm,'') ||'.POL_INFO P ON P.POL_ID = PL.POL_ID INNER JOIN '|| COALESCE(pDestSchNm,'') ||'.PLN_SPONSR_DIV PSD ON PSD.DIV_ID = PL.DIV_ID INNER JOIN '|| COALESCE(pDestSchNm,'') ||'.PLN_CLSS PC ON PC.CLSS_ID = PL.CLSS_ID INNER JOIN '|| COALESCE(pSrcSchNm,'') ||'.HIST_PLAN_MEMBER HPM ON HPM.POL_NO = P.POL_NO AND HPM.DIV_NO = PSD.DIV_NO AND HPM.CLSS_NO = PC.CLSS_NO WHERE HPM.ROW_ID ='|| COALESCE(pSrcTblRIDValue,'')  ||')';
				PREPARE S1 FROM vQry;				
				EXECUTE S1 INTO vPLNS_ID;
				
				--COMMENT#: COLUMN NAME FOR UPDATE
				IF vPLNS_ID IS NOT NULL AND vPLNS_ID <> '' THEN
					SET vPLNS_ID_COLNM = 'PLNS_ID';
				END IF;
				
				--#QUERYLOG_INSERT
				IF pLOG_Execution IS NULL 
				--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'850','')) <> 0)  
					THEN
			 		INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'850','SPCREATESCRIPT - DATA QUERY',vQry,SQLDIS);
			 		--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
			 		SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'850','');
			 	
			 	END IF;
				
			 	IF SQLDIS < 0 THEN
			 		SET vQry = vQry;
	 				SET vQryID = pSrcTblRIDValue;
	 				SET vQryLineNum = 850;
			 		GOTO ERROR_LOG;
			 	END IF;
			END IF;
			
			
		
			SELECT 
			CAST(LISTAGG(COALESCE(SRC_CONDITION_COLNM,'') || COALESCE(SRC_CONDITION_VAL,'') || ' ','') WITHIN GROUP (ORDER BY COL_ROWID)  AS CLOB(1212113))
			INTO  vSRC_WHERE_Clause_WITH_VALUE
			FROM RWW5.CONFIG_TBLCOLMAPPING WHERE TBL_COL_ROWID = pTBL_RID AND  ((SRC_CONDITION_COLNM <> '' AND SRC_CONDITION_COLNM IS NOT NULL) OR (SRC_CONDITION_VAL <> '' AND SRC_CONDITION_VAL IS NOT NULL));
			
			
			--COMMENT#: WHEN DATA FOR SINGLE DESTINATION TABLE IS COMING FROM MULTIPLE SOURCE TABLE
		    IF vSRC_WHERE_Clause_WITH_VALUE LIKE '%JOIN%' THEN
			    SET vQry = ' UPDATE ' || COALESCE(pDestSchNm,'') || '.'|| COALESCE(pDestTabNm,'') 
				||' SET ('||COALESCE(pDestColNm,'')|| COALESCE(','|| pSrcColNm_DomInst_COLNM,'') || COALESCE(','|| vPLNS_ID_COLNM,'') 
				||') =  ( SELECT DISTINCT '||COALESCE(pSrcColNm,'') || COALESCE(','|| pSrcColNm_DomInst_forSELECT,'')|| COALESCE(','|| vPLNS_ID,'') ||' FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(pSrcTabNm,'')||' AS A '|| COALESCE(vSRC_WHERE_Clause_WITH_VALUE,'') ||' AND A.'||COALESCE(pSrcTabIDCol,'') || ' = ('|| COALESCE(pSrcTblRIDValue,'') 
				||')) WHERE ' || pDestUpdateWhereClause;
		    ELSE
		    	SET vQry = ' UPDATE ' || COALESCE(pDestSchNm,'') || '.'|| COALESCE(pDestTabNm,'') 
				||' SET ('||COALESCE(pDestColNm,'')|| COALESCE(','|| pSrcColNm_DomInst_COLNM,'') || COALESCE(','|| vPLNS_ID_COLNM,'')
				||') =  ( SELECT '||COALESCE(pSrcColNm,'') || COALESCE(','|| pSrcColNm_DomInst_forSELECT,'') || COALESCE(','|| vPLNS_ID,'') ||' FROM '|| COALESCE(pSrcSchNm,'') ||'.'||COALESCE(pSrcTabNm,'')||' WHERE '||COALESCE(pSrcTabIDCol,'') || ' = ('|| COALESCE(pSrcTblRIDValue,'') 
				||')) WHERE ' || pDestUpdateWhereClause;
		    END IF;
		
			PREPARE S1 FROM vQry;				
			EXECUTE S1;
			
			--#QUERYLOG_INSERT
			IF pLOG_Execution IS NULL 
			--COMMENT# TO REDUCE THE NUMBER OF LOGGING RECORDS FIRST RECORD / FIRST INSTANCE LOGGING 
					--AND (SELECT COUNT(*) FROM RWW5.LOG_Query WHERE BATCH=pBatchNum  AND TBL_ROWID=pTBL_RID AND LINENUM='722') = 0
					AND (LENGTH(vQry_LineNum_LOGGED) - LENGTH(REPLACE(vQry_LineNum_LOGGED,'722','')) <> 0)  
					THEN
		 		INSERT INTO RWW5.LOG_Query(BATCH,TBL_ROWID,LINENUM,QRYTYPE,QRY,ERRORCODE) VALUES (pBatchNum,pTBL_RID,'722','SPCREATESCRIPT - DATA QUERY',vQry,SQLDIS);
		 		--COMMENT#: ANY CHANGE TO QRY_LINE, THE SAME NEEDS TO BE REPLICATED IN PARENT SP 'PRC_DATA_LOAD_USING_CONFIG_WITHUPDATE' SET vQry_LineNum_LOGGED (HARDCODED)
		 		SET vQry_LineNum_LOGGED  = REPLACE(vQry_LineNum_LOGGED,'722','');
		 	
		 	END IF;
			
		 	IF SQLDIS < 0 THEN
		 		SET vQry = vQry;
 				SET vQryID = pSrcTblRIDValue;
 				SET vQryLineNum = 722;
		 		GOTO ERROR_LOG;
		 	END IF;
		 	
		 	--COMMENT# UPDATE THE UPDATE COUNT
			--UPDATE RWW5.CONFIG_TBLMAPPING
	    	--SET UPDATE_RECORDCOUNT = UPDATE_RECORDCOUNT + 1
	    	--WHERE TBL_ROWID = pTBL_RID;
	    	
	    	SET pUPDATE_RECORDCOUNT = pUPDATE_RECORDCOUNT + 1;
	    	
	    	--COMMENT#: SETTING THE SOURCE RECORD READ STATUS TO 'R'
	    	IF pUPDATE_TABLE_READSTATUS = 'Y' THEN
				SET vUPDATE_READSTATUS='R';
			END IF;
			
		END IF;
ERROR_LOG:	
		
		--/*******************************
		IF (SQLDIS < 0 OR SQLCODE < 0) THEN
			
			SET vReturnStatus = SQLDIS;
			
			ROLLBACK TO SAVEPOINT BEFORE_TABLE_INSERT;
			INSERT INTO RWW5.LOG_ERROR(BATCH,TBL_ROWID,Error_description,Error_Msg,Error_Code,QRYID,QRY,QRYLINENUM) VALUES (pBatchNum,pTBL_RID,'ERROR - SPCREATESCRIPT - RID - ' || CAST(pSrcTblRIDValue AS VARCHAR(50)),vErrMsg,vReturnStatus,vQryID,vQry,vQryLineNum);
			
			UPDATE RWW5.CONFIG_TBLMAPPING SET LASTUSED_DT = CURRENT TIMESTAMP, ACTIVE_ROW='N',ImportStatus='ERROR' WHERE TBL_ROWID = pTBL_RID;
		ELSE 
			SET vReturnStatus = SQLDIS;	
			
		END IF;
		
		--*********************************/
	END;
	
END P1~
